-- Script was generated by Devart dbForge Studio for MySQL, Version 5.0.50.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 2012/6/5 10:54:25
-- Server version: 5.5.17
-- Client version: 4.1

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

-- 
-- Set default database
--
USE eHR;

--
-- Definition for table bonus
--
DROP TABLE IF EXISTS bonus;
CREATE TABLE bonus (
  id INT(11) NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL COMMENT '奖金名称(无,每月提成,季度提成等)',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 4
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '奖金';

--
-- Definition for table businessArea
--
DROP TABLE IF EXISTS businessArea;
CREATE TABLE businessArea (
  id INT(11) NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL COMMENT '商区名称',
  city INT(11) NOT NULL COMMENT '所属城市',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 11
AVG_ROW_LENGTH = 1638
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '商区';

--
-- Definition for table ci_sessions
--
DROP TABLE IF EXISTS ci_sessions;
CREATE TABLE ci_sessions (
  session_id VARCHAR(40) NOT NULL DEFAULT '0',
  ip_address VARCHAR(16) NOT NULL DEFAULT '0',
  user_agent VARCHAR(120) NOT NULL,
  last_activity INT(10) UNSIGNED NOT NULL DEFAULT 0,
  user_data TEXT NOT NULL,
  PRIMARY KEY (session_id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 16384
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table city
--
DROP TABLE IF EXISTS city;
CREATE TABLE city (
  id INT(11) NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL COMMENT '城市名称',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 6
AVG_ROW_LENGTH = 3276
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '城市';

--
-- Definition for table commissionDate
--
DROP TABLE IF EXISTS commissionDate;
CREATE TABLE commissionDate (
  id INT(11) NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL COMMENT '佣金支付期限(即时，1个月，3个月)',
  period INT(11) NOT NULL COMMENT '到岗天数',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 3
AVG_ROW_LENGTH = 8192
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '佣金支付期限';

--
-- Definition for table commonLevel
--
DROP TABLE IF EXISTS commonLevel;
CREATE TABLE commonLevel (
  id INT(11) NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL COMMENT '级别名称(一般,良好,优秀等)',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 6
AVG_ROW_LENGTH = 3276
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '通用级别';

--
-- Definition for table contractType
--
DROP TABLE IF EXISTS contractType;
CREATE TABLE contractType (
  id INT(11) NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL COMMENT '合同类型名称(全职,兼职,小时工等)',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 4
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '合同类型';

--
-- Definition for table deal
--
DROP TABLE IF EXISTS deal;
CREATE TABLE deal (
  id INT(11) NOT NULL AUTO_INCREMENT,
  talent INT(11) NOT NULL COMMENT '人才',
  job INT(11) NOT NULL COMMENT '职位',
  enterpriseNote TEXT DEFAULT NULL COMMENT '企业备注',
  accurate INT(11) DEFAULT NULL COMMENT '准确程度',
  communication INT(11) DEFAULT NULL COMMENT '顺畅程度',
  quality INT(11) DEFAULT NULL COMMENT '质量',
  enterpriseRemark TEXT DEFAULT NULL COMMENT '企业评价',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 44646
AVG_ROW_LENGTH = 104
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '交易';

--
-- Definition for table dealHistory
--
DROP TABLE IF EXISTS dealHistory;
CREATE TABLE dealHistory (
  id INT(11) NOT NULL AUTO_INCREMENT,
  deal INT(11) NOT NULL COMMENT '交易',
  status INT(11) NOT NULL COMMENT '交易状态',
  note TEXT DEFAULT NULL COMMENT '交易状态操作备注',
  role VARCHAR(255) NOT NULL COMMENT '操作者角色(enterpriseUser, Hunter, Admin)',
  roleId INT(11) NOT NULL COMMENT '操作者ID',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 428589
AVG_ROW_LENGTH = 132
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '交易状态历史';

--
-- Definition for table dealStatus
--
DROP TABLE IF EXISTS dealStatus;
CREATE TABLE dealStatus (
  id INT(11) NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL COMMENT '交易状态名称',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 12
AVG_ROW_LENGTH = 1489
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '交易状态';

--
-- Definition for table education
--
DROP TABLE IF EXISTS education;
CREATE TABLE education (
  id INT(11) NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL COMMENT '学历名称',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 4
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '学历';

--
-- Definition for table enterprise
--
DROP TABLE IF EXISTS enterprise;
CREATE TABLE enterprise (
  id INT(11) NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL COMMENT '用户名',
  phone VARCHAR(255) DEFAULT NULL COMMENT '电话',
  mail VARCHAR(255) DEFAULT NULL COMMENT '邮件',
  address VARCHAR(255) DEFAULT NULL COMMENT '地址',
  introduction TEXT NOT NULL COMMENT '公司介绍',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 4
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '企业';

--
-- Definition for table enterpriseUser
--
DROP TABLE IF EXISTS enterpriseUser;
CREATE TABLE enterpriseUser (
  id INT(11) NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL COMMENT '用户名',
  `password` VARCHAR(255) NOT NULL COMMENT '密码',
  enterprise INT(11) NOT NULL COMMENT '所属企业id',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 10
AVG_ROW_LENGTH = 1820
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '企业用户';

--
-- Definition for table hunter
--
DROP TABLE IF EXISTS hunter;
CREATE TABLE hunter (
  id INT(11) NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL COMMENT '用户名',
  `password` VARCHAR(255) NOT NULL COMMENT '密码',
  fixphone1 VARCHAR(255) DEFAULT NULL COMMENT '固话区号',
  fixphone2 VARCHAR(255) DEFAULT NULL COMMENT '固话号码',
  fixphone3 VARCHAR(255) DEFAULT NULL COMMENT '固话分机',
  mobile VARCHAR(255) DEFAULT NULL COMMENT '手机',
  personName VARCHAR(255) DEFAULT NULL COMMENT '姓名',
  idNo VARCHAR(255) DEFAULT NULL COMMENT '身份证号码',
  address VARCHAR(255) DEFAULT NULL COMMENT '地址',
  bankNo VARCHAR(255) DEFAULT NULL COMMENT '银行帐号',
  bankName VARCHAR(255) DEFAULT NULL COMMENT '开户行名称',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 4
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '猎头';

--
-- Definition for table industry
--
DROP TABLE IF EXISTS industry;
CREATE TABLE industry (
  id INT(11) NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL COMMENT '行业名称',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 4
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '行业';

--
-- Definition for table job
--
DROP TABLE IF EXISTS job;
CREATE TABLE job (
  id INT(11) NOT NULL AUTO_INCREMENT,
  creator INT(11) NOT NULL COMMENT '创建者',
  title VARCHAR(255) NOT NULL COMMENT '名称',
  requireNumber INT(11) NOT NULL COMMENT '需要人数',
  workType INT(11) NOT NULL COMMENT '工作类型(全职,兼职等)',
  contractType INT(11) NOT NULL COMMENT '合同类型(正式员工,合同员工等)',
  workTime INT(11) NOT NULL COMMENT '工作时间(做一休一,做四休三等)',
  city INT(11) DEFAULT NULL COMMENT '城市',
  businessArea INT(11) DEFAULT NULL COMMENT '商区',
  onBoardDate DATE DEFAULT NULL COMMENT '上岗日期',
  salaryFrom INT(11) NOT NULL COMMENT '工资下限',
  salaryTo INT(11) DEFAULT NULL COMMENT '工资上限',
  commissionDate INT(11) NOT NULL COMMENT '佣金支付期限',
  sex INT(11) DEFAULT NULL COMMENT '性别要求',
  ageFrom INT(11) DEFAULT NULL COMMENT '年龄下限',
  ageTo INT(11) DEFAULT NULL COMMENT '年龄上限',
  heightFrom INT(11) DEFAULT NULL COMMENT '身高下限',
  heightTo INT(11) DEFAULT NULL COMMENT '身高上限',
  education INT(11) DEFAULT NULL COMMENT '学历要求',
  specialSkill TEXT DEFAULT NULL COMMENT '特殊技能要求',
  detail TEXT NOT NULL COMMENT '岗位描述',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 101
AVG_ROW_LENGTH = 163
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '职位';

--
-- Definition for table jobBonus
--
DROP TABLE IF EXISTS jobBonus;
CREATE TABLE jobBonus (
  id INT(11) NOT NULL AUTO_INCREMENT,
  job INT(11) NOT NULL COMMENT '职位',
  bonus INT(11) NOT NULL COMMENT '奖金类型',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 76
AVG_ROW_LENGTH = 218
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '职位奖金';

--
-- Definition for table jobLanguage
--
DROP TABLE IF EXISTS jobLanguage;
CREATE TABLE jobLanguage (
  id INT(11) NOT NULL AUTO_INCREMENT,
  job INT(11) NOT NULL COMMENT '职位',
  language INT(11) NOT NULL COMMENT '语言',
  commonLevel INT(11) NOT NULL COMMENT '水平',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 76
AVG_ROW_LENGTH = 218
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '职位语言要求';

--
-- Definition for table jobWelfare
--
DROP TABLE IF EXISTS jobWelfare;
CREATE TABLE jobWelfare (
  id INT(11) NOT NULL AUTO_INCREMENT,
  job INT(11) NOT NULL COMMENT '职位',
  welfare INT(11) NOT NULL COMMENT '福利类型',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 76
AVG_ROW_LENGTH = 218
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '职位福利';

--
-- Definition for table language
--
DROP TABLE IF EXISTS language;
CREATE TABLE language (
  id INT(11) NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL COMMENT '外语名称',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 4
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '工作类型';

--
-- Definition for table sex
--
DROP TABLE IF EXISTS sex;
CREATE TABLE sex (
  id INT(11) NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL COMMENT '性别',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 3
AVG_ROW_LENGTH = 8192
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '性别';

--
-- Definition for table talent
--
DROP TABLE IF EXISTS talent;
CREATE TABLE talent (
  id INT(11) NOT NULL AUTO_INCREMENT,
  hunter INT(11) NOT NULL COMMENT '所属猎头',
  personName VARCHAR(255) NOT NULL COMMENT '人才姓名',
  birthYear DATE DEFAULT NULL COMMENT '出生年份',
  photoURL TEXT DEFAULT NULL COMMENT '照片路径',
  videoURL TEXT DEFAULT NULL COMMENT '视频路径',
  sex INT(11) DEFAULT NULL COMMENT '性别',
  marriage TINYINT(1) DEFAULT NULL COMMENT '婚姻',
  height INT(11) DEFAULT NULL COMMENT '身高',
  education INT(11) DEFAULT NULL COMMENT '学历',
  appearance INT(11) DEFAULT NULL COMMENT '外貌',
  expression INT(11) DEFAULT NULL COMMENT '表达能力',
  hunterNote TEXT DEFAULT NULL COMMENT '猎头备注',
  `release` TINYINT(1) NOT NULL COMMENT '是否可以发布',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id),
  INDEX active (active)
)
ENGINE = INNODB
AUTO_INCREMENT = 10001
AVG_ROW_LENGTH = 155
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '人才';

--
-- Definition for table talentFitBusinessArea
--
DROP TABLE IF EXISTS talentFitBusinessArea;
CREATE TABLE talentFitBusinessArea (
  id INT(11) NOT NULL AUTO_INCREMENT,
  talent INT(11) NOT NULL COMMENT '人才',
  businessArea INT(11) NOT NULL COMMENT '商区',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id),
  INDEX active (active),
  INDEX businessArea (businessArea),
  INDEX talent (talent)
)
ENGINE = INNODB
AUTO_INCREMENT = 6666
AVG_ROW_LENGTH = 44
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '人才适合商区';

--
-- Definition for table talentFitCity
--
DROP TABLE IF EXISTS talentFitCity;
CREATE TABLE talentFitCity (
  id INT(11) NOT NULL AUTO_INCREMENT,
  talent INT(11) NOT NULL COMMENT '人才',
  city INT(11) NOT NULL COMMENT '城市',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id),
  INDEX active (active),
  INDEX city (city),
  INDEX talent (talent)
)
ENGINE = INNODB
AUTO_INCREMENT = 3336
AVG_ROW_LENGTH = 52
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '人才适合城市';

--
-- Definition for table talentFitIndustry
--
DROP TABLE IF EXISTS talentFitIndustry;
CREATE TABLE talentFitIndustry (
  id INT(11) NOT NULL AUTO_INCREMENT,
  talent INT(11) NOT NULL COMMENT '人才',
  industry INT(11) NOT NULL COMMENT '行业',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 6668
AVG_ROW_LENGTH = 45
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '人才适合行业';

--
-- Definition for table talentUnfitIndustry
--
DROP TABLE IF EXISTS talentUnfitIndustry;
CREATE TABLE talentUnfitIndustry (
  id INT(11) NOT NULL AUTO_INCREMENT,
  talent INT(11) NOT NULL COMMENT '人才',
  industry INT(11) NOT NULL COMMENT '行业',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 6667
AVG_ROW_LENGTH = 44
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '人才不适合行业';

--
-- Definition for table tmp_ageFrom
--
DROP TABLE IF EXISTS tmp_ageFrom;
CREATE TABLE tmp_ageFrom (
  id INT(11) NOT NULL AUTO_INCREMENT,
  ageFrom INT(11) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 15
AVG_ROW_LENGTH = 1170
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tmp_ageTo
--
DROP TABLE IF EXISTS tmp_ageTo;
CREATE TABLE tmp_ageTo (
  id INT(11) NOT NULL AUTO_INCREMENT,
  ageTo INT(11) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 12
AVG_ROW_LENGTH = 1489
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tmp_heightFrom
--
DROP TABLE IF EXISTS tmp_heightFrom;
CREATE TABLE tmp_heightFrom (
  id INT(11) NOT NULL AUTO_INCREMENT,
  heightFrom INT(11) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 8
AVG_ROW_LENGTH = 2340
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tmp_heightTo
--
DROP TABLE IF EXISTS tmp_heightTo;
CREATE TABLE tmp_heightTo (
  id INT(11) NOT NULL AUTO_INCREMENT,
  heightTo INT(11) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 42
AVG_ROW_LENGTH = 399
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tmp_onboardDate
--
DROP TABLE IF EXISTS tmp_onboardDate;
CREATE TABLE tmp_onboardDate (
  id INT(11) NOT NULL AUTO_INCREMENT,
  onboardDate DATE NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 61
AVG_ROW_LENGTH = 273
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tmp_requirement
--
DROP TABLE IF EXISTS tmp_requirement;
CREATE TABLE tmp_requirement (
  id INT(11) NOT NULL AUTO_INCREMENT,
  requirement INT(11) NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 1
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tmp_requireNumber
--
DROP TABLE IF EXISTS tmp_requireNumber;
CREATE TABLE tmp_requireNumber (
  id INT(11) NOT NULL AUTO_INCREMENT,
  requireNumber INT(11) NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 4
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tmp_salaryFrom
--
DROP TABLE IF EXISTS tmp_salaryFrom;
CREATE TABLE tmp_salaryFrom (
  id INT(11) NOT NULL AUTO_INCREMENT,
  salaryFrom INT(11) NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 11
AVG_ROW_LENGTH = 1638
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tmp_salaryTo
--
DROP TABLE IF EXISTS tmp_salaryTo;
CREATE TABLE tmp_salaryTo (
  id INT(11) NOT NULL AUTO_INCREMENT,
  salaryTo INT(11) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 12
AVG_ROW_LENGTH = 1489
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tmp_statusFlow
--
DROP TABLE IF EXISTS tmp_statusFlow;
CREATE TABLE tmp_statusFlow (
  id INT(11) NOT NULL AUTO_INCREMENT,
  cur INT(11) NOT NULL COMMENT '当前状态',
  next INT(11) DEFAULT NULL COMMENT '下个状态',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 24
AVG_ROW_LENGTH = 712
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '交易流程';

--
-- Definition for table tmp_statusFlowCase
--
DROP TABLE IF EXISTS tmp_statusFlowCase;
CREATE TABLE tmp_statusFlowCase (
  id INT(11) NOT NULL AUTO_INCREMENT,
  status1 INT(11) NOT NULL COMMENT '状态1',
  status2 INT(11) DEFAULT NULL,
  status3 INT(11) DEFAULT NULL,
  status4 INT(11) DEFAULT NULL,
  status5 INT(11) DEFAULT NULL,
  status6 INT(11) DEFAULT NULL,
  status7 INT(11) DEFAULT NULL,
  status8 INT(11) DEFAULT NULL,
  status9 INT(11) DEFAULT NULL,
  status10 INT(11) DEFAULT NULL,
  status11 INT(11) DEFAULT NULL,
  status12 INT(11) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 54
AVG_ROW_LENGTH = 309
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '测试流程案例表';

--
-- Definition for table tmp_statusRole
--
DROP TABLE IF EXISTS tmp_statusRole;
CREATE TABLE tmp_statusRole (
  id INT(11) NOT NULL AUTO_INCREMENT,
  status INT(11) NOT NULL COMMENT '状态',
  role VARCHAR(255) NOT NULL COMMENT '角色名',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 12
AVG_ROW_LENGTH = 1489
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '交易状态角色';

--
-- Definition for table welfare
--
DROP TABLE IF EXISTS welfare;
CREATE TABLE welfare (
  id INT(11) NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL COMMENT '福利名称(无,饭贴,车贴等)',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 4
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '其他福利';

--
-- Definition for table workTime
--
DROP TABLE IF EXISTS workTime;
CREATE TABLE workTime (
  id INT(11) NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL COMMENT '工作时间类型名称(做一休一,做四休三等)',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 4
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '工作时间类型';

--
-- Definition for table workType
--
DROP TABLE IF EXISTS workType;
CREATE TABLE workType (
  id INT(11) NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL COMMENT '工作类型名称(全职,兼职,小时工等)',
  active TINYINT(1) NOT NULL DEFAULT 1,
  updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created TIMESTAMP DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (id)
)
ENGINE = INNODB
AUTO_INCREMENT = 4
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = '工作类型';

DELIMITER $$

--
-- Definition for procedure getCandidateNumF_hunter_enterpriseUser
--
DROP PROCEDURE IF EXISTS getCandidateNumF_hunter_enterpriseUser$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getCandidateNumF_hunter_enterpriseUser(IN iHunter INT, IN iEnterpriseUser INT)
  COMMENT '取得特定猎头对特定公司用户的推荐人数
in:
  iHunter
  iEnterpriseUser
out:
  int'
BEGIN
  SELECT
    count(*) num
  FROM
    deal a
  JOIN talent b
  ON a.talent = b.id
  JOIN job c
  ON a.job = c.id
  JOIN enterpriseUser d
  ON c.creator = d.id
  WHERE
    a.active = 1
    AND
    b.active = 1
    AND
    c.active = 1
    AND
    d.active = 1
    AND
    b.hunter = iHunter
    AND
    d.id = iEnterpriseUser;
END
$$

--
-- Definition for procedure getCandidateNumF_job
--
DROP PROCEDURE IF EXISTS getCandidateNumF_job$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getCandidateNumF_job(IN iJob INT)
  COMMENT '取得特定职位的推荐人数
in:
  iJob
res:
  int'
BEGIN
  SELECT
    count(*) num
  FROM
    deal
  WHERE
    active = 1
    AND
    job = iJob;
END
$$

--
-- Definition for procedure getChosenTalentNumF_job
--
DROP PROCEDURE IF EXISTS getChosenTalentNumF_job$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getChosenTalentNumF_job(IN iJob INT)
  COMMENT '取得特定职位的成交人数
in:
  iJob
res:
  int'
BEGIN
  SELECT
    count(*) num
  FROM
    (
    SELECT
      a.lastStatusDealId
    FROM
      (
      SELECT
        max(id) lastStatusDealId
      FROM
        dealHistory
      WHERE
        active = 1
      GROUP BY
        deal
      ) a
    JOIN
      dealHistory b
    ON
    a.lastStatusDealId = b.id
    WHERE
      /*成交的status*/
      b.status > 7
    ) aa
  JOIN
    deal bb
  ON
  aa.lastStatusDealId = bb.id
  WHERE
    bb.active = 1
    AND
    bb.job = iJob;
END
$$

--
-- Definition for procedure getDealSuccessNumF_hunter
--
DROP PROCEDURE IF EXISTS getDealSuccessNumF_hunter$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getDealSuccessNumF_hunter(IN iHunter INT)
  COMMENT '取得特定猎头推荐成功数
in:
  iHunter 猎头id
out:
  int'
BEGIN
  SELECT
    count(*) num
  FROM
    (
    SELECT
      a.id deal
    , b.hunter
    FROM
      deal a
    JOIN talent b
    ON a.talent = b.id
    WHERE
      a.active = 1
      AND
      b.active = 1
    ) aaa
  JOIN
    (
    SELECT
      aa.deal
    FROM
      dealHistory aa
    JOIN
      (
      SELECT
        max(a.id) id
      FROM
        dealHistory a
      WHERE
        a.active = 1
      GROUP BY
        a.deal
      ) bb
    ON aa.id = bb.id
    WHERE
      /*表示成功的状态*/
      aa.status >= 7
    ) bbb
  ON aaa.deal = bbb.deal
  WHERE
    aaa.hunter = iHunter;
END
$$

--
-- Definition for procedure getDealSuccessNumF_hunter_enterpriseUser
--
DROP PROCEDURE IF EXISTS getDealSuccessNumF_hunter_enterpriseUser$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getDealSuccessNumF_hunter_enterpriseUser(IN iHunter         INT,
                                                               IN iEnterpriseUser INT)
  COMMENT '取得特定猎头为特定企业用户推荐成功数
in:
  iHunter
  iEnterpriseUser
out:
  int'
BEGIN
  SELECT
    count(*) num
  FROM
    (
    SELECT
      a.id deal
    , b.hunter
    , c.creator
    FROM
      deal a
    JOIN talent b
    ON a.talent = b.id
    JOIN job c
    ON a.job = c.id
    JOIN enterpriseUser d
    ON c.creator = d.id
    WHERE
      a.active = 1
      AND
      b.active = 1
      AND
      c.active = 1
      AND
      d.active = 1
    ) aaa
  JOIN
    (
    SELECT
      aa.deal
    FROM
      dealHistory aa
    JOIN
      (
      SELECT
        max(a.id) id
      FROM
        dealHistory a
      WHERE
        a.active = 1
      GROUP BY
        a.deal
      ) bb
    ON aa.id = bb.id
    WHERE
      /*表示成功的状态*/
      aa.status >= 7
    ) bbb
  ON aaa.deal = bbb.deal
  WHERE
    aaa.hunter = iHunter
    AND
    aaa.creator = iEnterpriseUser;
END
$$

--
-- Definition for procedure getEnterpriseListF_hunter
--
DROP PROCEDURE IF EXISTS getEnterpriseListF_hunter$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getEnterpriseListF_hunter(IN iHunter INT, IN iOffset INT, IN iLimit INT)
  COMMENT '取得特定猎头的企业名称列表\\r
in:\\r
  iHunter\\r
  iOffset\\r
  iLimit\\r
out:\\r
  array'
BEGIN
  DECLARE vOffset INT;
  DECLARE vLimit  INT;

  SET vOffset = coalesce(iOffset, 0);
  SET vLimit = coalesce(iLimit, 100000);

  SELECT
    e.id, e.name
  FROM
    deal a
  JOIN talent b
  ON a.talent = b.id
  JOIN job c
  ON a.job = c.id
  JOIN enterpriseUser d
  ON c.creator = d.id
  JOIN enterprise e
  ON d.enterprise = e.id
  WHERE
    a.active = 1
    AND
    b.active = 1
    AND
    c.active = 1
    AND
    d.active = 1
    AND
    e.active = 1
    AND
    b.hunter = iHunter
  GROUP BY
    e.id
  LIMIT
    vOffset, vLimit;
END
$$

--
-- Definition for procedure getFitBusinessAreaF_talent
--
DROP PROCEDURE IF EXISTS getFitBusinessAreaF_talent$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getFitBusinessAreaF_talent(IN iTalent INT)
  COMMENT '取得特定人才的适合商区
in:
  iTalent
out:
  array'
BEGIN
  SELECT
    b.name businessAreaName
  FROM
    talentFitBusinessArea a
  JOIN
    businessArea b
  ON a.businessArea = b.id
  WHERE
    a.active = 1
    AND
    b.active = 1
    AND
    a.talent = iTalent;
END
$$

--
-- Definition for procedure getFitCityF_talent
--
DROP PROCEDURE IF EXISTS getFitCityF_talent$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getFitCityF_talent(IN iTalent INT)
  COMMENT '取得特定人才的适合城市
in:
  iTalent
out:
  array'
BEGIN
  SELECT
    b.name cityName
  FROM
    talentFitCity a
  JOIN
    city b
  ON a.city = b.id
  WHERE
    a.active = 1
    AND
    b.active = 1
    AND
    talent = iTalent;
END
$$

--
-- Definition for procedure getFitTalentF_job
--
DROP PROCEDURE IF EXISTS getFitTalentF_job$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getFitTalentF_job(IN iJob INT, IN iIsNum BOOLEAN)
  COMMENT '取得特定职位的匹配人数或信息

in:

  iJob

  iIsNum(如为TRUE则返回数字)
out:

  int or array'
BEGIN
  DECLARE vCity         INT;
  DECLARE vBusinessArea INT;
  DECLARE vSex          INT;
  DECLARE vAgeFrom      INT;
  DECLARE vAgeTo        INT;
  DECLARE vHeightFrom   INT;
  DECLARE vHeightTo     INT;
  DECLARE vEducation    INT;
  DECLARE vNowYear      INT;
  DECLARE vIsNum        BOOLEAN;

  SET vNowYear = year(now());

  SET vIsNum = ifnull(iIsNum, FALSE);

  SELECT
    city
  , businessArea
  , sex
  , ageFrom
  , ageTo
  , heightFrom
  , heightTo
  , education
  INTO
    vCity, vBusinessArea, vSex, vAgeFrom, vAgeTo, vHeightFrom, vHeightTo, vEducation
  FROM
    job
  WHERE
    id = iJob;

  IF vIsNum
  THEN
    SET @sql1 = 'SELECT count(*) num FROM talent a WHERE';
  ELSE
    SET @sql1 = 'SELECT * FROM talent a WHERE';
  END IF;
  SET @sql1 = concat(@sql1, ' a.active = 1 AND a.release = 1 AND');
  IF vSex IS NOT NULL
  THEN
    SET @sql1 = concat(@sql1, ' a.sex = ', vSex, ' AND');
  END IF;

  SET @sql1 = concat(@sql1, ' (', vNowYear, ' - ifnull(year(a.birthYear), ', vNowYear, ' + 1) + 1) >= ', ifnull(vAgeFrom, 0), ' AND');
  SET @sql1 = concat(@sql1, ' (', vNowYear, ' - ifnull(year(a.birthYear), ', vNowYear, ' - 99) + 1) <=', ifnull(vAgeTo, 100), ' AND');
  SET @sql1 = concat(@sql1, ' ifnull(a.height, 0) >= ', ifnull(vHeightFrom, 0), ' AND');
  SET @sql1 = concat(@sql1, ' ifnull(a.height, 200) <= ', ifnull(vHeightTo, 200), ' AND');
  SET @sql1 = concat(@sql1, ' ifnull(a.education, 0) >= ', ifnull(vEducation, 0));
  IF (vBusinessArea IS NOT NULL)
  THEN
    SET @sql2 = concat(' and exists(select * from talentFitBusinessArea WHERE active =1 and talent = a.id and businessArea = ', vBusinessArea, ')');
  ELSEIF (vCity IS NOT NULL) THEN
    SET @sql2 = concat(' and (exists(select * from talentFitBusinessArea aa join businessArea bb on aa.businessArea = bb.id WHERE aa.active =1 and bb.active =1 and aa.talent = a.id and bb.city = ', vCity, ') or exists(select * from talentFitCity WHERE active =1 and talent = a.id and city = ', vCity, '))');
  ELSE
    SET @sql2 = '';
  END IF;
  SET @sql = concat(@sql1, @sql2);
  PREPARE stmt FROM @sql;
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;

END
$$

--
-- Definition for procedure getFitTalentSearchF_job
--
DROP PROCEDURE IF EXISTS getFitTalentSearchF_job$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getFitTalentSearchF_job(IN iJob INT, IN iHunter INT, IN iSex INT, IN iHeightFrom INT, IN iHeightTo INT, IN iEducation INT, IN iAppearance INT, IN iExpression INT, IN iCity INT, IN iBusinessArea INT, IN iOffset INT, IN iLimit INT)
  COMMENT '取得特定职位的匹配人数条件搜索结果
in:
  iJob,
  iHunter,
  iSex,
  iHeightFrom,
  iHeightTo,
  iEducation,
  iAppearance,
  iExpression,
  iCity,
  iBusinessArea,
  iOffset,
  iLimit
out:
  array'
BEGIN
  DECLARE vCity         INT;
  DECLARE vBusinessArea INT;
  DECLARE vSex          INT;
  DECLARE vAgeFrom      INT;
  DECLARE vAgeTo        INT;
  DECLARE vHeightFrom   INT;
  DECLARE vHeightTo     INT;
  DECLARE vEducation    INT;
  DECLARE vNowYear      INT;

  DECLARE vOffset       INT;
  DECLARE vLimit        INT;

  SET vOffset = coalesce(iOffset, 0);
  SET vLimit = coalesce(iLimit, 100000);
  SET vNowYear = year(now());

  SELECT
    city
  , businessArea
  , sex
  , ageFrom
  , ageTo
  , heightFrom
  , heightTo
  , education
  INTO
    vCity, vBusinessArea, vSex, vAgeFrom, vAgeTo, vHeightFrom, vHeightTo, vEducation
  FROM
    job
  WHERE
    id = iJob;

  SET @sql1 = 'SELECT * FROM talent a WHERE';
  SET @sql1 = concat(@sql1, ' a.active = 1 AND a.release = 1 AND');
  IF vSex IS NOT NULL
  THEN
    SET @sql1 = concat(@sql1, ' a.sex = ', vSex, ' AND');
  END IF;

  SET @sql1 = concat(@sql1, ' (', vNowYear, ' - ifnull(year(a.birthYear), ', vNowYear, ' + 1) + 1) >= ', ifnull(vAgeFrom, 0), ' AND');
  SET @sql1 = concat(@sql1, ' (', vNowYear, ' - ifnull(year(a.birthYear), ', vNowYear, ' - 99) + 1) <=', ifnull(vAgeTo, 100), ' AND');
  SET @sql1 = concat(@sql1, ' ifnull(a.height, 0) >= ', ifnull(vHeightFrom, 0), ' AND');
  SET @sql1 = concat(@sql1, ' ifnull(a.height, 200) <= ', ifnull(vHeightTo, 200), ' AND');
  SET @sql1 = concat(@sql1, ' ifnull(a.education, 0) >= ', ifnull(vEducation, 0));
  IF (vBusinessArea IS NOT NULL)
  THEN
    SET @sql2 = concat(' and exists(select * from talentFitBusinessArea WHERE active =1 and talent = a.id and businessArea = ', vBusinessArea, ')');
  ELSEIF (vCity IS NOT NULL) THEN
    SET @sql2 = concat(' and (exists(select * from talentFitBusinessArea aa join businessArea bb on aa.businessArea = bb.id WHERE aa.active =1 and bb.active =1 and aa.talent = a.id and bb.city = ', vCity, ') or exists(select * from talentFitCity WHERE active =1 and talent = a.id and city = ', vCity, '))');
  ELSE
    SET @sql2 = '';
  END IF;
  SET @sql = concat(@sql1, @sql2);

  IF iHunter IS NOT NULL
  THEN
    SET @sql = concat(@sql, ' and a.hunter =', iHunter);
  END IF;
  IF iSex IS NOT NULL
  THEN
    SET @sql = concat(@sql, ' and a.sex =', iSex);
  END IF;
  IF iHeightFrom IS NOT NULL
  THEN
    SET @sql = concat(@sql, ' and a.height >=', iHeightFrom);
  END IF;
  IF iHeightTo IS NOT NULL
  THEN
    SET @sql = concat(@sql, ' and a.height <=', iHeightTo);
  END IF;
  IF iEducation IS NOT NULL
  THEN
    SET @sql = concat(@sql, ' and a.education >=', iEducation);
  END IF;
  IF iAppearance IS NOT NULL
  THEN
    SET @sql = concat(@sql, ' and a.appearance >=', iAppearance);
  END IF;
  IF iExpression IS NOT NULL
  THEN
    SET @sql = concat(@sql, ' and a.expression >=', iExpression);
  END IF;
  IF iCity IS NOT NULL
  THEN
    SET @sql = concat(@sql, ' and (exists(select * from talentFitBusinessArea aa join businessArea bb on aa.businessArea = bb.id WHERE aa.active =1 and bb.active =1 and aa.talent = a.id and bb.city = ', iCity, ') or exists(select * from talentFitCity WHERE active =1 and talent = a.id and city = ', iCity, '))');
  END IF;
  IF iBusinessArea IS NOT NULL
  THEN
    SET @sql = concat(@sql, ' and exists (select * from talentFitBusinessArea c where c.active = 1 and c.talent = a.id and c.businessArea = ', iBusinessArea, ')');
  END IF;

  SET @sql = concat(@sql, ' LIMIT ', vOffset, ', ', vLimit);

  PREPARE stmt FROM @sql;
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;

END
$$

--
-- Definition for procedure getHistoryF_deal
--
DROP PROCEDURE IF EXISTS getHistoryF_deal$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getHistoryF_deal(IN iDeal   INT,
                                       IN iOffset INT,
                                       IN iLimit  INT)
  COMMENT '取得特定交易历史状态
in:
  iDeal
  iOffset
  iLimit
out:
  array'
BEGIN
  DECLARE vOffset INT;
  DECLARE vLimit  INT;

  SET vOffset = coalesce(iOffset, 0);
  SET vLimit = coalesce(iLimit, 100000);

  SELECT
    *
  FROM
    (
    SELECT
      b.name
    , a.status
    , a.note
    , a.created
    , a.id
    FROM
      dealHistory a
    JOIN enterpriseUser b
    ON a.roleId = b.id
    JOIN dealStatus c
    ON a.status = c.id
    WHERE
      a.active = 1
      AND
      b.active = 1
      AND
      c.active = 1
      AND
      role = 'enterpriseUser'
      AND
      a.deal = iDeal

    UNION

    SELECT
      b.name
    , a.status
    , a.note
    , a.created
    , a.id
    FROM
      dealHistory a
    JOIN hunter b
    ON a.roleId = b.id
    JOIN dealStatus c
    ON a.status = c.id
    WHERE
      a.active = 1
      AND
      b.active = 1
      AND
      c.active = 1
      AND
      role = 'hunter'
      AND
      a.deal = iDeal
    ) aa
  ORDER BY
    aa.id
  LIMIT
    vOffset, vLimit;
END
$$

--
-- Definition for procedure getHistoryF_talent
--
DROP PROCEDURE IF EXISTS getHistoryF_talent$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getHistoryF_talent(IN iTalent INT,
                                         IN iOffset INT,
                                         IN iLimit  INT)
  COMMENT '取得特定人才的交易历史状态
in:
  iTalent
  iOffset
  iLimit
out:
  array'
BEGIN
  DECLARE vOffset INT;
  DECLARE vLimit  INT;

  SET vOffset = coalesce(iOffset, 0);
  SET vLimit = coalesce(iLimit, 100000);

  SELECT
    *
  FROM
    (
    SELECT
      b.name
    , a.status
    , a.note
    , a.created
    , a.id
    FROM
      dealHistory a
    JOIN enterpriseUser b
    ON a.roleId = b.id
    JOIN dealStatus c
    ON a.status = c.id
    JOIN deal d
    ON a.deal = d.id
    WHERE
      a.active = 1
      AND
      b.active = 1
      AND
      c.active = 1
      AND
      d.active = 1
      AND
      role = 'enterpriseUser'
      AND
      d.talent = iTalent

    UNION

    SELECT
      b.name
    , a.status
    , a.note
    , a.created
    , a.id
    FROM
      dealHistory a
    JOIN hunter b
    ON a.roleId = b.id
    JOIN dealStatus c
    ON a.status = c.id
    JOIN deal d
    ON a.deal = d.id
    WHERE
      a.active = 1
      AND
      b.active = 1
      AND
      c.active = 1
      AND
      d.active = 1
      AND
      role = 'hunter'
      AND
      d.talent = iTalent
    ) aa
  ORDER BY
    aa.id
  LIMIT
    vOffset, vLimit;
END
$$

--
-- Definition for procedure getHunterToDoF_talent
--
DROP PROCEDURE IF EXISTS getHunterToDoF_talent$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getHunterToDoF_talent(IN iTalent INT, IN iOffset INT, IN iLimit INT)
  COMMENT '取得特定特定人才猎头待办事项
in:
  iTalent
  iOffset
  iLimit
res:
  array'
BEGIN
  DECLARE vOffset INT;
  DECLARE vLimit  INT;

  SET vOffset = coalesce(iOffset, 0);
  SET vLimit = coalesce(iLimit, 100000);

  SELECT
    ee.name
  , dd.title
  , ff.name
  , aa.note
  , aa.created
  FROM
    dealHistory aa
  JOIN
    (
    SELECT
      max(a.id) id
    FROM
      dealHistory a
    WHERE
      a.active = 1
    GROUP BY
      a.deal
    ) bb
  ON aa.id = bb.id
  JOIN deal cc
  ON aa.deal = cc.id
  JOIN job dd
  ON cc.job = dd.id
  JOIN enterpriseUser ee
  ON aa.roleId = ee.id
  JOIN dealStatus ff
  ON aa.status = ff.id
  WHERE
    cc.active = 1
    AND
    cc.talent = iTalent
    AND
    dd.active = 1
    AND
    ee.active = 1
    AND
    ff.active = 1
    AND
    /*hunter todo status*/
    (aa.status = 2
    OR
    aa.status = 6
    )
  LIMIT
    vOffset, vLimit;
END
$$

--
-- Definition for procedure getInfoF_talent
--
DROP PROCEDURE IF EXISTS getInfoF_talent$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getInfoF_talent(IN iTalent INT)
  COMMENT '取得特定人才的信息
in:
  iTalent
out:
  array'
BEGIN
  SELECT
    a.id
  , b.name hunterAccountName
  , a.personName talentPersonName
  , ((year(now()) - year(a.birthYear)) + 1) age
  , a.photoURL
  , a.videoURL
  , c.name sex
  , (
    CASE
    WHEN a.marriage = 0 THEN
      '未婚'
    WHEN a.marriage = 1 THEN
      '已婚'
    ELSE
      '未知'
    END) marriage
  , height
  , d.name education
  , e.name appearance
  , f.name expression
  , a.hunterNote

  FROM
    talent a
  JOIN
  hunter b
  ON a.hunter = b.id
  JOIN
  sex c
  ON
  a.sex = c.id
  JOIN education d
  ON a.education = d.id
  JOIN commonLevel e
  ON a.appearance = e.id
  JOIN commonLevel f
  ON a.expression = f.id
  WHERE
    a.id = iTalent
    AND
    a.active = 1
    AND
    b.active = 1
    AND
    c.active = 1
    AND
    d.active = 1
    AND
    e.active = 1
    AND
    f.active = 1;

END
$$

--
-- Definition for procedure getJobListF_enterpriseUser
--
DROP PROCEDURE IF EXISTS getJobListF_enterpriseUser$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getJobListF_enterpriseUser(IN iEnterpriseUser INT, IN iOffset INT, IN iLimit INT)
  COMMENT '取得特定企业用户的职位列表
in:
  iEnterpriseUser
  iOffset
  iLimit
res:
  array'
BEGIN
  DECLARE vOffset INT;
  DECLARE vLimit  INT;

  SET vOffset = coalesce(iOffset, 0);
  SET vLimit = coalesce(iLimit, 100000);

  SELECT *
  FROM
    job
  WHERE
    creator = iEnterpriseUser
    AND
    active = 1
  ORDER BY
    updated DESC
  LIMIT
    vOffset, vLimit;
END
$$

--
-- Definition for procedure getNumF_hunter_enterprise_dealStatus
--
DROP PROCEDURE IF EXISTS getNumF_hunter_enterprise_dealStatus$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getNumF_hunter_enterprise_dealStatus(IN iHunter     INT,
                                                           IN iEnterprise INT,
                                                           IN iStatus     INT)
  COMMENT '取得特定猎头对特定企业的特定交易状态的人数
in:
  iHunter
  iEnterprise
  iStatus
out:
  int'
BEGIN
  SELECT
    count(*) num
  FROM
    deal a
  JOIN job b
  ON a.job = b.id
  JOIN enterpriseUser c
  ON b.creator = c.id
  JOIN enterprise d
  ON c.enterprise = d.id
  JOIN talent e
  ON a.talent = e.id
  JOIN
    (
    SELECT
      aa.deal
    FROM
      dealHistory aa
    JOIN
      (
      SELECT
        max(a.id) id
      FROM
        dealHistory a
      WHERE
        a.active = 1
      GROUP BY
        a.deal
      ) bb
    ON aa.id = bb.id
    WHERE
      aa.status = iStatus
    ) bbb
  ON a.id = bbb.deal
  WHERE
    a.active = 1
    AND
    b.active = 1
    AND
    c.active = 1
    AND
    d.active = 1
    AND
    e.active = 1
    AND
    d.id = iEnterprise
    AND
    e.hunter = iHunter;


END
$$

--
-- Definition for procedure getPointF_hunter
--
DROP PROCEDURE IF EXISTS getPointF_hunter$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getPointF_hunter(IN iHunter INT)
  COMMENT '取得特定猎头积分
in:
  iHunter 猎头id
out:
  int'
BEGIN
  SELECT
  (sum(accurate)+sum(communication)+sum(quality))/(count(*)*3) score
FROM
  (
  SELECT
    a.id deal
  , a.accurate
  , a.communication
  , a.quality
  , b.hunter
  FROM
    deal a
  JOIN talent b
  ON a.talent = b.id
  WHERE
    a.active = 1
    AND
    b.active = 1
  ) aaa
JOIN
  (
  SELECT
    aa.deal
  FROM
    dealHistory aa
  JOIN
    (
    SELECT
      max(a.id) id
    FROM
      dealHistory a
    WHERE
      a.active = 1
    GROUP BY
      a.deal
    ) bb
  ON aa.id = bb.id
  WHERE
    /*表示成功的状态*/
    aa.status >= 7
  ) bbb
ON aaa.deal = bbb.deal
WHERE
  aaa.hunter = iHunter
  AND
  aaa.accurate IS NOT NULL
  AND
  aaa.communication IS NOT NULL
  AND
  aaa.quality IS NOT NULL;
END
$$

--
-- Definition for procedure getStatusF_deal
--
DROP PROCEDURE IF EXISTS getStatusF_deal$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getStatusF_deal(IN iDeal INT)
  COMMENT '取得特定交易当前状态
in:
  iDeal
out:
  array'
BEGIN
  DECLARE vId INT;

  SELECT
    max(id)
  FROM
    dealHistory
  WHERE
    active = 1
    AND
    deal = iDeal
  INTO
    vId;

  SELECT
    b.name
  FROM
    dealHistory a
  JOIN dealStatus b
  ON a.status = b.id
  WHERE
    a.active = 1
    AND
    b.active = 1
    AND
    a.id = vid;
END
$$

--
-- Definition for procedure getSuccessTalentF_hunter_enterpriseUser
--
DROP PROCEDURE IF EXISTS getSuccessTalentF_hunter_enterpriseUser$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getSuccessTalentF_hunter_enterpriseUser(IN iHunter INT, IN iEnterpriseUser INT, IN iOffset INT, IN iLimit INT)
  COMMENT '取得特定猎头为特定企业用户推荐成功人才信息
in:
  iHunter
  iEnterpriseUser
  iOffset
  iLimit
out:
  array'
BEGIN
  DECLARE vOffset INT;
  DECLARE vLimit  INT;

  SET vOffset = coalesce(iOffset, 0);
  SET vLimit = coalesce(iLimit, 100000);

  SELECT
    aaa.*
  FROM
    (
    SELECT
      a.id deal
    , b.*
    , c.creator
    FROM
      deal a
    JOIN talent b
    ON a.talent = b.id
    JOIN job c
    ON a.job = c.id
    JOIN enterpriseUser d
    ON c.creator = d.id
    WHERE
      a.active = 1
      AND
      b.active = 1
      AND
      c.active = 1
      AND
      d.active = 1
    ) aaa
  JOIN
    (
    SELECT
      aa.deal
    FROM
      dealHistory aa
    JOIN
      (
      SELECT
        max(a.id) id
      FROM
        dealHistory a
      WHERE
        a.active = 1
      GROUP BY
        a.deal
      ) bb
    ON aa.id = bb.id
    WHERE
      /*表示成功的状态*/
      aa.status >= 7
    ) bbb
  ON aaa.deal = bbb.deal
  WHERE
    aaa.hunter = iHunter
    AND
    aaa.creator = iEnterpriseUser
  LIMIT
    vOffset, vLimit;
END
$$

--
-- Definition for procedure getTalentF_job_status
--
DROP PROCEDURE IF EXISTS getTalentF_job_status$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getTalentF_job_status(IN iJob    INT,
                                                  IN iStatus INT,
                                                  IN iOffset INT,
                                                  IN iLimit  INT)
  COMMENT '取得特定职位特定状态人才名单
in:
  iJob
  iStatus
  iOffset
  iLimit
res:
  array'
BEGIN
  DECLARE vOffset INT;
  DECLARE vLimit  INT;

  SET vOffset = coalesce(iOffset, 0);
  SET vLimit = coalesce(iLimit, 100000);

  SELECT
    *
  FROM
    (
    SELECT
      a.id deal
    , b.*
    FROM
      deal a
    JOIN talent b
    ON a.talent = b.id
    JOIN job c
    ON a.job = c.id
    WHERE
      a.active = 1
      AND
      b.active = 1
      AND
      c.active = 1
      AND
      c.id = iJob
    ) aaa
  JOIN
    (
    SELECT
      aa.deal
    FROM
      dealHistory aa
    JOIN
      (
      SELECT
        max(a.id) id
      FROM
        dealHistory a
      WHERE
        a.active = 1
      GROUP BY
        a.deal
      ) bb
    ON aa.id = bb.id
    WHERE
      aa.status = iStatus
    ) bbb
  ON aaa.deal = bbb.deal
  LIMIT
    vOffset, vLimit;
END
$$

--
-- Definition for procedure getTalentIdF_condition
--
DROP PROCEDURE IF EXISTS getTalentIdF_condition$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getTalentIdF_condition(IN iHunter INT, IN iSex INT, IN iHeightFrom INT, IN iHeightTo INT, IN iEducation INT, IN iAppearance INT, IN iExpression INT, IN iCity INT, IN iBusinessArea INT, IN iOffset INT, IN iLimit INT)
  COMMENT '取得特定条件的人才id
in:
  iSex,
  iHeightFrom,
  iHeightTo,
  iEducation,
  iAppearance,
  iExpression,
  iCity,
  iBusinessArea
out:
  int
'
BEGIN
  DECLARE vOffset INT;
  DECLARE vLimit  INT;

  SET vOffset = coalesce(iOffset, 0);
  SET vLimit = coalesce(iLimit, 100000);

  SET @sql = 'SELECT id FROM talent a WHERE a.active = 1 AND a.release = 1 AND';
  IF iHunter IS NOT NULL
  THEN
    SET @sql = concat(@sql, ' and a.hunter =', iHunter);
  END IF;
  IF iSex IS NOT NULL
  THEN
    SET @sql = concat(@sql, ' and a.sex =', iSex);
  END IF;
  IF iHeightFrom IS NOT NULL
  THEN
    SET @sql = concat(@sql, ' and a.height >=', iHeightFrom);
  END IF;
  IF iHeightTo IS NOT NULL
  THEN
    SET @sql = concat(@sql, ' and a.height <=', iHeightTo);
  END IF;
  IF iEducation IS NOT NULL
  THEN
    SET @sql = concat(@sql, ' and a.education >=', iEducation);
  END IF;
  IF iAppearance IS NOT NULL
  THEN
    SET @sql = concat(@sql, ' and a.appearance >=', iAppearance);
  END IF;
  IF iExpression IS NOT NULL
  THEN
    SET @sql = concat(@sql, ' and a.expression >=', iExpression);
  END IF;
  IF iCity IS NOT NULL
  THEN
    SET @sql = concat(@sql, ' and (exists(select * from talentFitBusinessArea aa join businessArea bb on aa.businessArea = bb.id WHERE aa.active =1 and bb.active =1 and aa.talent = a.id and bb.city = ', iCity, ') or exists(select * from talentFitCity WHERE active =1 and talent = a.id and city = ', iCity, '))');
  END IF;
  IF iBusinessArea IS NOT NULL
  THEN
    SET @sql = concat(@sql, ' and exists (select * from talentFitBusinessArea c where c.active = 1 and c.talent = a.id and c.businessArea = ', iBusinessArea, ')');
  END IF;

  SET @sql = concat(@sql, ' LIMIT ', vOffset, ', ', vLimit);

  PREPARE stmt FROM @sql;
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;
END
$$

--
-- Definition for procedure t_createAgeFromTmpTable
--
DROP PROCEDURE IF EXISTS t_createAgeFromTmpTable$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createAgeFromTmpTable(IN iNum INT, IN iFrom INT, IN iStep INT)
  COMMENT '创建临时年龄起点集合表
in:
  iFrom 年龄起点
  iStep 加年龄幅度
  iNum 个数
out:
  none'
BEGIN
  DECLARE i INT;

  SET i = 0;
  DROP TABLE IF EXISTS tmp_ageFrom;
  CREATE TABLE tmp_ageFrom
(
  id INT(11) NOT NULL AUTO_INCREMENT,
  ageFrom INT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;
  INSERT INTO tmp_ageFrom (ageFrom) VALUES (NULL);
  WHILE i < iNum
  DO
    INSERT INTO tmp_ageFrom (ageFrom) VALUES (iFrom + (i * iStep));
    SET i = i + 1;
  END WHILE;

END
$$

--
-- Definition for procedure t_createAgeToTmpTable
--
DROP PROCEDURE IF EXISTS t_createAgeToTmpTable$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createAgeToTmpTable(IN iNum INT, IN iTo INT, IN iStep INT)
  COMMENT '创建临时年龄封顶集合表
in:
  iTo 基数
  iStep 加年龄幅度
  iNum 个数
out:
  none'
BEGIN
  DECLARE i INT;

  SET i = 0;
  DROP TABLE IF EXISTS tmp_ageTo;
  CREATE TABLE tmp_ageTo
(
  id INT(11) NOT NULL AUTO_INCREMENT,
  ageTo INT,
  PRIMARY KEY (id)
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;
  INSERT INTO tmp_ageTo (ageTo) VALUES (NULL);
  WHILE i < iNum
  DO
    INSERT INTO tmp_ageTo (ageTo) VALUES (iTo + (i * iStep));
    SET i = i + 1;
  END WHILE;

END
$$

--
-- Definition for procedure t_createBonus
--
DROP PROCEDURE IF EXISTS t_createBonus$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createBonus(IN iNum INT)
  COMMENT '创建测试奖金类型
in:
  iNum
out:
  none'
BEGIN
  DECLARE i     INT;

  SET i = 0;

label1:
  LOOP
    SET i = i + 1;
    IF i > iNum
    THEN
      LEAVE label1;
    ELSE
INSERT INTO `bonus` (`name`, `created`) VALUES (concat('奖金',i), NULL);
      END IF;
  END LOOP label1;
END
$$

--
-- Definition for procedure t_createBusinessArea
--
DROP PROCEDURE IF EXISTS t_createBusinessArea$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createBusinessArea(IN iNum VARCHAR(255))
  COMMENT '批量创建商区
in:
  iNum(每个城市商区数)
out:
  none'
BEGIN
  DECLARE done INT DEFAULT FALSE;
  DECLARE i    INT;
  DECLARE vCid INT;
  DECLARE vCur CURSOR FOR
  SELECT
    id
  FROM
    city;

  DECLARE CONTINUE
  HANDLER FOR NOT FOUND
  SET done = TRUE;

  OPEN vCur;

lable1:
  LOOP
    FETCH vCur INTO vCid;
    IF done
    THEN
      LEAVE lable1;
    END IF;
    CALL
    t_createBusinessAreaForCity(vCid, iNum);
  END LOOP;

  CLOSE vCur;
END
$$

--
-- Definition for procedure t_createBusinessAreaForCity
--
DROP PROCEDURE IF EXISTS t_createBusinessAreaForCity$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createBusinessAreaForCity(IN iCity INT,
                                          IN iNum  INT)
  COMMENT '为城市创建测试商区
in:
  iCity城市id
  iNum 商区数
out:
  none'
BEGIN
  DECLARE cId   INT;
  DECLARE cName VARCHAR(255);
  DECLARE i     INT;

  SET i = 0;

  SELECT
  id
, name
INTO
  cId, cName
FROM
  city
WHERE
  id = iCity;

label1:
  LOOP
    SET i = i + 1;
    IF i > iNum
    THEN
      LEAVE label1;
    ELSE
      INSERT INTO businessArea (`name`, city, `created`) VALUES (concat(cName, '_b', i), cId, NULL);
    END IF;
  END LOOP label1;

END
$$

--
-- Definition for procedure t_createCity
--
DROP PROCEDURE IF EXISTS t_createCity$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createCity(IN iNum INT)
  COMMENT '创建测试城市
in:
  iNum
out:
  none'
BEGIN
  DECLARE i     INT;

  SET i = 0;

label1:
  LOOP
    SET i = i + 1;
    IF i > iNum
    THEN
      LEAVE label1;
    ELSE
INSERT INTO city (`name`, `created`) VALUES (concat('城市',i), NULL);
      END IF;
  END LOOP label1;
END
$$

--
-- Definition for procedure t_createContractType
--
DROP PROCEDURE IF EXISTS t_createContractType$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createContractType(IN iNum INT)
  COMMENT '创建测试合同类型
in:
  iNum
out:
  none'
BEGIN
  DECLARE i     INT;

  SET i = 0;

label1:
  LOOP
    SET i = i + 1;
    IF i > iNum
    THEN
      LEAVE label1;
    ELSE
INSERT INTO `contractType` (`name`, `created`) VALUES (concat('合同类型',i), NULL);
      END IF;
  END LOOP label1;
END
$$

--
-- Definition for procedure t_createDeal
--
DROP PROCEDURE IF EXISTS t_createDeal$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createDeal()
  COMMENT '创建测试交易
'
BEGIN
  DECLARE i               INT;
  DECLARE j               INT;
  DECLARE k               INT;
  DECLARE vNullStep       INT; /*无简历投递的工作步长*/
  DECLARE vCommonLevelNum INT;
  DECLARE iJobNum         INT;
  DECLARE iTalentNum      INT;

  TRUNCATE TABLE deal;
  SELECT
    max(id)
  FROM
    commonLevel
  INTO
    vCommonLevelNum;

  SELECT
    max(id)
  FROM
    job
  INTO
    iJobNum;

  SET vNullStep = 5;

  SELECT
    max(id)
  FROM
    talent
  INTO
    iTalentNum;

  SET i = 1;
  SET j = 1;
  SET k = 1;

label:
WHILE i <= iJobNum
DO
IF mod(i, vNullStep) = 0
  THEN
    SET i = i + 1;
    ITERATE label;
  END IF;
  SET j = 1;
  WHILE j <= iTalentNum
  DO
    IF mod(j, i) = 0
    THEN
      INSERT INTO `deal` (`talent`, `job`, `enterpriseNote`, `accurate`, `communication`, `quality`, `enterpriseRemark`, `created`) VALUES (j, i, concat('企业备注', k), mod(k, vCommonLevelNum) + 1, mod(k + 1, vCommonLevelNum) + 1, mod(k + 2, vCommonLevelNum) + 1, concat('企业评价', k), NULL);
    END IF;
    SET j = j + 1;
    SET k = k + 1;
  END WHILE;
  SET i = i + 1;
END WHILE;
END
$$

--
-- Definition for procedure t_createDealHistory
--
DROP PROCEDURE IF EXISTS t_createDealHistory$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createDealHistory()
  COMMENT '创建测试交易历史状态
'
BEGIN
  DECLARE i                  INT;
  DECLARE j                  INT;
  DECLARE vDealNum           INT;
  DECLARE vStatusFlowCaseNum INT;
  DECLARE vStatusFlowCase    INT;
  DECLARE vStatusCaseMax     INT;
  DECLARE vEnterpriseUser    INT;
  DECLARE vHunter            INT;
  DECLARE vRole              VARCHAR(255);
  DECLARE vRoleId            INT;

  TRUNCATE dealHistory;

  SELECT
    count(*) - 1
  FROM
    information_schema.columns
  WHERE
    table_schema = 'eHR'
    AND
    table_name = 'tmp_statusFlowCase'
  INTO
    vStatusCaseMax;

  SELECT
    max(id)
  FROM
    deal
  INTO
    vDealNum;

  SELECT
    max(id)
  FROM
    tmp_statusFlowCase
  INTO
    vStatusFlowCaseNum;

  SET i = 1;
  WHILE i <= vDealNum
  DO
    IF mod(i, 5) != 0 /*is deal mod 5 = 0 has no deal history*/
    THEN
      /*get vEnterpriseUser and vHunter*/
      SELECT
        b.creator
      , c.hunter
      FROM
        deal a
      JOIN job b
      ON a.job = b.id
      JOIN talent c
      ON a.talent = c.id
      WHERE
        a.id = i
      INTO
        vEnterpriseUser, vHunter;

      IF mod(i, vStatusFlowCaseNum) = 0
      THEN
        SET vStatusFlowCase = vStatusFlowCaseNum;
      ELSE
        SET vStatusFlowCase = mod(i, vStatusFlowCaseNum);
      END IF;
      SET j = 1;
      WHILE (j <= vStatusCaseMax)
      DO
        /*get status related*/
        SET @tmpSql = concat('select ifnull(status', j, ',0) from tmp_statusFlowCase where id =', vStatusFlowCase, ' into @vStatus');
        PREPARE sqlStr FROM @tmpSql;
        EXECUTE sqlStr;

        SELECT
          role
        FROM
          `tmp_statusRole`
        WHERE
          status = @vStatus
        INTO
          vRole;

        IF vRole = 'enterpriseUser'
        THEN
          SET vRoleId = vEnterpriseUser;
        ELSEIF vRole = 'hunter' THEN
          SET vRoleId = vHunter;
        END IF;
        SET @tmpSql = concat('insert into dealHistory(`deal`, `status`, `note`, `role`, `roleId`, `created`) select ', i, ', @vStatus, \'note', i, '_', j, '\', ', '\'', vRole, '\',', vRoleId, ', NULL from tmp_statusFlowCase where id =', vStatusFlowCase);
        PREPARE sqlStr FROM @tmpSql;
        EXECUTE sqlStr;
        SET j = j + 1;
      END WHILE;
    END IF;
    SET i = i + 1;
  END WHILE;
  DELETE
  FROM
    `dealHistory`
  WHERE
    status = 0;
END
$$

--
-- Definition for procedure t_createEducation
--
DROP PROCEDURE IF EXISTS t_createEducation$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createEducation(IN iNum INT)
  COMMENT '创建测试学历
in:
  iNum
out:
  none'
BEGIN
  DECLARE i     INT;

  SET i = 0;

label1:
  LOOP
    SET i = i + 1;
    IF i > iNum
    THEN
      LEAVE label1;
    ELSE
INSERT INTO `education` (`name`, `created`) VALUES (concat('学历',i), NULL);
      END IF;
  END LOOP label1;
END
$$

--
-- Definition for procedure t_createEnterprise
--
DROP PROCEDURE IF EXISTS t_createEnterprise$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createEnterprise(IN iNum INT)
  COMMENT '创建测试企业'
BEGIN
  DECLARE i INT;

  SET i = 0;

label1:
  LOOP
    SET i = i + 1;
    IF i > iNum
    THEN
      LEAVE label1;
    ELSE
      INSERT INTO `enterprise` (`name`, `phone`, `mail`, `address`, `introduction`, `created`) VALUES (concat('ent', i, '_'), 12345678, 'enterprise@mail.com', '企业地址sample', '企业介绍sample', NULL);
    END IF;
  END LOOP label1;

END
$$

--
-- Definition for procedure t_createEnterpriseUser
--
DROP PROCEDURE IF EXISTS t_createEnterpriseUser$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createEnterpriseUser(IN iNum VARCHAR(255))
  COMMENT '批量创建企业用户
in:
  iNum(每个企业用户数)
out:
  none'
BEGIN
  DECLARE done INT DEFAULT FALSE;
  DECLARE i    INT;
  DECLARE vEid INT;
  DECLARE vCur CURSOR FOR
  SELECT
    id
  FROM
    enterprise;

  DECLARE CONTINUE
  HANDLER FOR NOT FOUND
  SET done = TRUE;

  OPEN vCur;

lable1:
  LOOP
    FETCH vCur INTO vEid;
    IF done
    THEN
      LEAVE lable1;
    END IF;
    CALL
    t_createUserForEnterprise(vEid, iNum);
  END LOOP;

  CLOSE vCur;
END
$$

--
-- Definition for procedure t_createHeightFromTmpTable
--
DROP PROCEDURE IF EXISTS t_createHeightFromTmpTable$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createHeightFromTmpTable(IN iNum INT, IN iFrom INT, IN iStep INT)
  COMMENT '创建临时身高起点集合表
in:
  iFrom 身高起点
  iStep 加身高幅度
  iNum 个数
out:
  none'
BEGIN
  DECLARE i INT;

  SET i = 0;
  DROP TABLE IF EXISTS tmp_heightFrom;
  CREATE TABLE tmp_heightFrom
(
  id INT(11) NOT NULL AUTO_INCREMENT,
  heightFrom INT,
  PRIMARY KEY (id)
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;
  INSERT INTO tmp_heightFrom (heightFrom) VALUES (NULL);
  WHILE i < iNum
  DO
    INSERT INTO tmp_heightFrom (heightFrom) VALUES (iFrom + (i * iStep));
    SET i = i + 1;
  END WHILE;

END
$$

--
-- Definition for procedure t_createHeightToTmpTable
--
DROP PROCEDURE IF EXISTS t_createHeightToTmpTable$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createHeightToTmpTable(IN iNum INT, IN iTo INT, IN iStep INT)
  COMMENT '创建临时身高封顶集合表
in:
  iTo 加身高基数
  iStep 加身高幅度
  iNum 个数
out:
  none'
BEGIN
  DECLARE i INT;

  SET i = 0;
  DROP TABLE IF EXISTS tmp_heightTo;
  CREATE TABLE tmp_heightTo
(
  id INT(11) NOT NULL AUTO_INCREMENT,
  heightTo INT,
  PRIMARY KEY (id)
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;
  INSERT INTO tmp_heightTo (heightTo) VALUES (NULL);
  WHILE i < iNum
  DO
    INSERT INTO tmp_heightTo (heightTo) VALUES (iTo + (i * iStep));
    SET i = i + 1;
  END WHILE;

END
$$

--
-- Definition for procedure t_createHunter
--
DROP PROCEDURE IF EXISTS t_createHunter$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createHunter(IN iNum INT)
  COMMENT '创建测试猎头帐户
in:
  iNum
out:
  none'
BEGIN
  DECLARE i     INT;

  SET i = 0;

label1:
  LOOP
    SET i = i + 1;
    IF i > iNum
    THEN
      LEAVE label1;
    ELSE
  INSERT INTO `hunter` (`name`, `password`, `fixphone1`, `fixphone2`, `fixphone3`, `mobile`, `personName`, `idNo`, `address`, `bankNo`, `bankName`, `created`) VALUES (concat('hunter', i), '123456', '001', '12345678', '8888', concat('1380000000', i), concat('猎头名', i), concat('320000000000000', i), concat('猎头地址', i), concat('bankno', i), concat('银行名称', i), NULL);
    END IF;
  END LOOP label1;
END
$$

--
-- Definition for procedure t_createIndustry
--
DROP PROCEDURE IF EXISTS t_createIndustry$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createIndustry(IN iNum INT)
  COMMENT '创建测试行业
in:
  iNum
out:
  none'
BEGIN
  DECLARE i     INT;

  SET i = 0;

label1:
  LOOP
    SET i = i + 1;
    IF i > iNum
    THEN
      LEAVE label1;
    ELSE
INSERT INTO `industry` (`name`, `created`) VALUES (concat('行业',i), NULL);
      END IF;
  END LOOP label1;
END
$$

--
-- Definition for procedure t_createJob
--
DROP PROCEDURE IF EXISTS t_createJob$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createJob(IN iNum INT)
  COMMENT '创建测试职位
in:
  iNum职位个数
out:
  none'
BEGIN
  DECLARE i                       INT;

  DECLARE vCreatorNum             INT;
  DECLARE vRequireNumberNum       INT;
  DECLARE vWorkTypeNum            INT;
  DECLARE vContractTypeNum        INT;
  DECLARE vWorkTimeNum            INT;
  DECLARE vCityNum                INT;
  DECLARE vBusinessAreaNum        INT;
  DECLARE vOnBoardDateNum         INT;
  DECLARE vSalaryFromNum          INT;
  DECLARE vSalaryToNum            INT;
  DECLARE vCommissionDateNum      INT;
  DECLARE vSexNum                 INT;
  DECLARE vAgeFromNum             INT;
  DECLARE vAgeToNum               INT;
  DECLARE vHeightFromNum          INT;
  DECLARE vHeightToNum            INT;
  DECLARE vEducationNum           INT;

  DECLARE vBonusNum               INT;
  DECLARE vLanguageNum            INT;
  DECLARE vCommonLevelNum         INT;
  DECLARE vWelfareNum             INT;

  DECLARE vCityAndBusinessAreaNum INT;

  DECLARE vCreator                INT;
  DECLARE vTitle                  VARCHAR(255);
  DECLARE vRequireNumber          INT;
  DECLARE vWorkType               INT;
  DECLARE vContractType           INT;
  DECLARE vWorkTime               INT;
  DECLARE vCity                   INT;
  DECLARE vBusinessArea           INT;
  DECLARE vOnBoardDate            DATE;
  DECLARE vSalaryFrom             INT;
  DECLARE vSalaryTo               INT;
  DECLARE vCommissionDate         INT;
  DECLARE vSex                    INT;
  DECLARE vAgeFrom                INT;
  DECLARE vAgeTo                  INT;
  DECLARE vHeightFrom             INT;
  DECLARE vHeightTo               INT;
  DECLARE vEducation              INT;
  DECLARE vSpecialSkill           VARCHAR(255);
  DECLARE vDetail                 VARCHAR(255);

  DECLARE vBonus                  INT;
  DECLARE vLanguage               INT;
  DECLARE vCommonLevel            INT;
  DECLARE vWelfare                INT;

  DECLARE vJob                    INT;

  TRUNCATE TABLE job;
  TRUNCATE TABLE jobBonus;
  TRUNCATE TABLE jobLanguage;
  TRUNCATE TABLE jobWelfare;
  SELECT
    max(id)
  FROM
    enterpriseUser
  INTO
    vCreatorNum;

  SELECT
    max(id)
  FROM
    tmp_requireNumber
  INTO
    vRequireNumberNum;

  SELECT
    max(id)
  FROM
    workType
  INTO
    vWorkTypeNum;

  SELECT
    max(id)
  FROM
    contractType
  INTO
    vContractTypeNum;

  SELECT
    max(id)
  FROM
    workTime
  INTO
    vWorkTimeNum;

  SELECT
    max(id)
  FROM
    city
  INTO
    vCityNum;

  SELECT
    max(id)
  FROM
    businessArea
  INTO
    vbusinessAreaNum;

  SELECT
    max(id)
  FROM
    tmp_onBoardDate
  INTO
    vOnBoardDateNum;

  SELECT
    max(id)
  FROM
    tmp_salaryFrom
  INTO
    vSalaryFromNum;

  SELECT
    max(id)
  FROM
    tmp_salaryTo
  INTO
    vSalaryToNum;

  SELECT
    max(id)
  FROM
    commissionDate
  INTO
    vCommissionDateNum;

  SELECT
    max(id)
  FROM
    sex
  INTO
    vSexNum;

  SELECT
    max(id)
  FROM
    tmp_ageFrom
  INTO
    vAgeFromNum;

  SELECT
    max(id)
  FROM
    tmp_ageTo
  INTO
    vAgeToNum;

  SELECT
    max(id)
  FROM
    tmp_heightFrom
  INTO
    vHeightFromNum;

  SELECT
    max(id)
  FROM
    tmp_heightTo
  INTO
    vHeightToNum;

  SELECT
    max(id)
  FROM
    education
  INTO
    vEducationNum;

  SELECT
    max(id)
  FROM
    bonus
  INTO
    vBonusNum;

  SELECT
    max(id)
  FROM
    language
  INTO
    vLanguageNum;

  SELECT
    max(id)
  FROM
    commonLevel
  INTO
    vCommonLevelNum;

  SELECT
    max(id)
  FROM
    welfare
  INTO
    vWelfareNum;

  SET vCityAndBusinessAreaNum = vCityNum + vBusinessAreaNum;

  SET i = 1;
  WHILE i <= iNum
  DO
    SELECT
      id
    FROM
      enterpriseUser
    WHERE
      id =
      CASE
      WHEN mod(i, vCreatorNum) = 0 THEN
        vCreatorNum
      ELSE
        mod(i, vCreatorNum)
      END
    INTO
      vCreator;

    SELECT
      concat('职位名称', i)
    INTO
      vTitle;

    SELECT
      requireNumber
    FROM
      tmp_requireNumber
    WHERE
      id =
      CASE
      WHEN mod(i, vRequireNumberNum) = 0 THEN
        vRequireNumberNum
      ELSE
        mod(i, vRequireNumberNum)
      END
    INTO
      vRequireNumber;

    SELECT
      id
    FROM
      workType
    WHERE
      id =
      CASE
      WHEN mod(i, vWorkTypeNum) = 0 THEN
        vWorkTypeNum
      ELSE
        mod(i, vWorkTypeNum)
      END
    INTO
      vWorkType;

    SELECT
      id
    FROM
      contractType
    WHERE
      id =
      CASE
      WHEN mod(i, vContractTypeNum) = 0 THEN
        vContractTypeNum
      ELSE
        mod(i, vContractTypeNum)
      END
    INTO
      vContractType;

    SELECT
      id
    FROM
      workTime
    WHERE
      id =
      CASE
      WHEN mod(i, vWorkTimeNum) = 0 THEN
        vWorkTimeNum
      ELSE
        mod(i, vWorkTimeNum)
      END
    INTO
      vWorkTime;

    SELECT
      id
    FROM
      city
    WHERE
      id =
      CASE
      WHEN mod(i, vCityNum) = 0 THEN
        vCityNum
      ELSE
        mod(i, vCityNum)
      END
    INTO
      vCity;

    SELECT
      id
    FROM
      businessArea
    WHERE
      id =
      CASE
      WHEN mod(i, vBusinessAreaNum) = 0 THEN
        vBusinessAreaNum
      ELSE
        mod(i, vBusinessAreaNum)
      END
    INTO
      vBusinessArea;

    SELECT
      id
    FROM
      contractType
    WHERE
      id =
      CASE
      WHEN mod(i, vContractTypeNum) = 0 THEN
        vContractTypeNum
      ELSE
        mod(i, vContractTypeNum)
      END
    INTO
      vContractType;

    SELECT
      onboardDate
    FROM
      tmp_onboardDate
    WHERE
      id =
      CASE
      WHEN mod(i, vOnboardDateNum) = 0 THEN
        vOnboardDateNum
      ELSE
        mod(i, vOnboardDateNum)
      END
    INTO
      vOnboardDate;

    SELECT
      salaryFrom
    FROM
      tmp_salaryFrom
    WHERE
      id =
      CASE
      WHEN mod(i, vSalaryFromNum) = 0 THEN
        vSalaryFromNum
      ELSE
        mod(i, vSalaryFromNum)
      END
    INTO
      vSalaryFrom;

    SELECT
      salaryTo
    FROM
      tmp_salaryTo
    WHERE
      id =
      CASE
      WHEN mod(i, vSalaryToNum) = 0 THEN
        vSalaryToNum
      ELSE
        mod(i, vSalaryToNum)
      END
    INTO
      vSalaryTo;

    SELECT
      id
    FROM
      commissionDate
    WHERE
      id =
      CASE
      WHEN mod(i, vCommissionDateNum) = 0 THEN
        vCommissionDateNum
      ELSE
        mod(i, vCommissionDateNum)
      END
    INTO
      vCommissionDate;

    SELECT
      id
    FROM
      sex
    WHERE
      id =
      CASE
      WHEN mod(i, vSexNum) = 0 THEN
        vSexNum
      ELSE
        mod(i, vSexNum)
      END
    INTO
      vSex;

    SELECT
      ageFrom
    FROM
      tmp_ageFrom
    WHERE
      id =
      CASE
      WHEN mod(i, vAgeFromNum) = 0 THEN
        vAgeFromNum
      ELSE
        mod(i, vAgeFromNum)
      END
    INTO
      vAgeFrom;

    SELECT
      ageTo
    FROM
      tmp_ageTo
    WHERE
      id =
      CASE
      WHEN mod(i, vAgeToNum) = 0 THEN
        vAgeToNum
      ELSE
        mod(i, vAgeToNum)
      END
    INTO
      vAgeTo;

    SELECT
      heightFrom
    FROM
      tmp_heightFrom
    WHERE
      id =
      CASE
      WHEN mod(i, vHeightFromNum) = 0 THEN
        vHeightFromNum
      ELSE
        mod(i, vHeightFromNum)
      END
    INTO
      vHeightFrom;

    SELECT
      heightTo
    FROM
      tmp_heightTo
    WHERE
      id =
      CASE
      WHEN mod(i, vHeightToNum) = 0 THEN
        vHeightToNum
      ELSE
        mod(i, vHeightToNum)
      END
    INTO
      vHeightTo;

    SELECT
      id
    FROM
      education
    WHERE
      id =
      CASE
      WHEN mod(i, vEducationNum) = 0 THEN
        vEducationNum
      ELSE
        mod(i, vEducationNum)
      END
    INTO
      vEducation;

    SELECT
      concat('特殊技能', i)
    INTO
      vSpecialSkill;

    SELECT
      concat('职位描述', i)
    INTO
      vDetail;

    SET vBonus = NULL;
    SELECT
      id
    FROM
      bonus
    WHERE
      id = mod(i, vBonusNum + 1) /*if mod vBonusNum+1 = 0 not insert new record into jobBonus*/
    INTO
      vBonus;

    SET vLanguage = NULL;
    SELECT
      id
    FROM
      language
    WHERE
      id = mod(i, vLanguageNum + 1) /*if mod vLanguageNum+1 = 0 not insert new record into jobLanguage*/
    INTO
      vLanguage;

    SELECT
      id
    FROM
      commonLevel
    WHERE
      id =
      CASE
      WHEN mod(i, vCommonLevelNum) = 0 THEN
        vCommonLevelNum
      ELSE
        mod(i, vCommonLevelNum)
      END
    INTO
      vCommonLevel;

    SET vWelfare = NULL;
    SELECT
      id
    FROM
      welfare
    WHERE
      id = mod(i, vWelfareNum + 1) /*if mod vWelfareNum+1 = 0 not insert new record into jobWelfare*/
    INTO
      vWelfare;

    IF mod(i, vCityAndBusinessAreaNum) > 0 AND mod(i, vCityAndBusinessAreaNum) <= vCityNum
    THEN
      INSERT INTO `job` (`creator`, `title`, `requireNumber`, `workType`, `contractType`, `workTime`, `city`, `businessArea`, `onBoardDate`, `salaryFrom`, `salaryTo`, `commissionDate`, `sex`, `ageFrom`, `ageTo`, `heightFrom`, `heightTo`, `education`, `specialSkill`, `detail`, `created`) VALUES (vCreator, vTitle, vRequireNumber, vWorkType, vContractType, vWorkTime, vCity, NULL, vOnBoardDate, vSalaryFrom, ifnull(vSalaryFrom, 0) + vSalaryTo, vCommissionDate, vSex, vAgeFrom, ifnull(vAgeFrom, 60) + vAgeTo, vHeightFrom, ifnull(vHeightFrom, 170) + vHeightTo, vEducation, vSpecialSkill, vDetail, NULL);
    ELSE
      INSERT INTO `job` (`creator`, `title`, `requireNumber`, `workType`, `contractType`, `workTime`, `city`, `businessArea`, `onBoardDate`, `salaryFrom`, `salaryTo`, `commissionDate`, `sex`, `ageFrom`, `ageTo`, `heightFrom`, `heightTo`, `education`, `specialSkill`, `detail`, `created`) VALUES (vCreator, vTitle, vRequireNumber, vWorkType, vContractType, vWorkTime, NULL, vBusinessArea, vOnBoardDate, vSalaryFrom, ifnull(vSalaryFrom, 0) + vSalaryTo, vCommissionDate, vSex, vAgeFrom, ifnull(vAgeFrom, 60) + vAgeTo, vHeightFrom, ifnull(vHeightFrom, 170) + vHeightTo, vEducation, vSpecialSkill, vDetail, NULL);
    END IF;
    SET i = i + 1;

    SET vJob = LAST_INSERT_ID();
    IF vBonus IS NOT NULL
    THEN
      INSERT INTO `jobBonus` (`job`, `bonus`, `created`) VALUES (vJob, vBonus, NULL);
    END IF;
    IF vLanguage IS NOT NULL
    THEN
      INSERT INTO `jobLanguage` (`job`, `language`, `commonLevel`, `created`) VALUES (vJob, vLanguage, vCommonLevel, NULL);
    END IF;
    IF vWelfare IS NOT NULL
    THEN
      INSERT INTO `jobWelfare` (`job`, `welfare`, `created`) VALUES (vJob, vWelfare, NULL);
    END IF;
  END WHILE;
END
$$

--
-- Definition for procedure t_createLanguage
--
DROP PROCEDURE IF EXISTS t_createLanguage$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createLanguage(IN iNum INT)
  COMMENT '创建测试外语种类
in:
  iNum
out:
  none'
BEGIN
  DECLARE i     INT;

  SET i = 0;

label1:
  LOOP
    SET i = i + 1;
    IF i > iNum
    THEN
      LEAVE label1;
    ELSE
INSERT INTO `language` (`name`, `created`) VALUES (concat('语言',i), NULL);
      END IF;
  END LOOP label1;
END
$$

--
-- Definition for procedure t_createOnBoardDateTmpTable
--
DROP PROCEDURE IF EXISTS t_createOnBoardDateTmpTable$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createOnBoardDateTmpTable(IN iNum INT)
  COMMENT '创建临时上岗日期集合表
in:
  iNum
out:
  none'
BEGIN
  DECLARE i INT;

  SET i = 1;
  DROP TABLE IF EXISTS tmp_onboardDate;
  CREATE TABLE tmp_onboardDate
(
  id INT(11) NOT NULL AUTO_INCREMENT,
  onboardDate DATE NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

  WHILE i <= iNum
  DO
    INSERT INTO tmp_onboardDate (onboardDate) VALUES (adddate(curdate(), i));
    SET i = i + 1;
  END WHILE;
END
$$

--
-- Definition for procedure t_createRequireNumberTmpTable
--
DROP PROCEDURE IF EXISTS t_createRequireNumberTmpTable$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createRequireNumberTmpTable(IN iNum INT)
  COMMENT '创建临时需求人数集合表
in:
  iNum
out:
  none'
BEGIN
  DECLARE i INT;

  SET i = 1;
  DROP TABLE IF EXISTS tmp_requireNumber;
  CREATE TABLE tmp_requireNumber
(
  id INT(11) NOT NULL AUTO_INCREMENT,
  requireNumber INT NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

  WHILE i <= iNum
  DO
    INSERT INTO tmp_requireNumber (requireNumber) VALUES (i);
    SET i = i + 1;
  END WHILE;
END
$$

--
-- Definition for procedure t_createSalaryFromTmpTable
--
DROP PROCEDURE IF EXISTS t_createSalaryFromTmpTable$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createSalaryFromTmpTable(IN iNum INT, IN iFrom INT, IN iStep INT)
  COMMENT '创建临时起薪集合表
in:
  iFrom 起薪
  iStep 加价幅度
  iNum 个数
out:
  none'
BEGIN
  DECLARE i INT;

  SET i = 0;
  DROP TABLE IF EXISTS tmp_salaryFrom;
  CREATE TABLE tmp_salaryFrom
(
  id INT(11) NOT NULL AUTO_INCREMENT,
  salaryFrom INT NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

  WHILE i < iNum
  DO
    INSERT INTO tmp_salaryFrom (salaryFrom) VALUES (iFrom + (i * iStep));
    SET i = i + 1;
  END WHILE;
END
$$

--
-- Definition for procedure t_createSalaryToTmpTable
--
DROP PROCEDURE IF EXISTS t_createSalaryToTmpTable$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createSalaryToTmpTable(IN iNum INT, IN iTo INT, IN iStep INT)
  COMMENT '创建临时薪水封顶集合表
in:
  iTo 加薪基数
  iStep 加价幅度
  iNum 个数
out:
  none'
BEGIN
  DECLARE i INT;

  SET i = 0;
  DROP TABLE IF EXISTS tmp_salaryTo;
  CREATE TABLE tmp_salaryTo
(
  id INT(11) NOT NULL AUTO_INCREMENT,
  salaryTo INT,
  PRIMARY KEY (id)
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;
  INSERT INTO tmp_salaryTo (salaryTo) VALUES (NULL);
  WHILE i < iNum
  DO
    INSERT INTO tmp_salaryTo (salaryTo) VALUES (iTo + (i * iStep));
    SET i = i + 1;
  END WHILE;

END
$$

--
-- Definition for procedure t_createStatusFlowCaseTmpTable
--
DROP PROCEDURE IF EXISTS t_createStatusFlowCaseTmpTable$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createStatusFlowCaseTmpTable(IN iNum INT)
  COMMENT '创建交易状态流程案例表
in:
  iNum 流程最多步骤'
BEGIN
  DECLARE i INT;

  DROP TABLE IF EXISTS tmp_statusFlowCase;

  CREATE TABLE tmp_statusFlowCase
  (
    `status1` INT(11) NOT NULL COMMENT '状态1'
  ) ENGINE = INNODB DEFAULT CHARSET = utf8 COMMENT = '测试流程案例表';

  SET i = 1;
  SET @tmpSql1 = 'select t0.cur cur0';
  SET @tmpSql2 = ' from tmp_statusFlow t0';

  WHILE i <= (iNum - 2)
  DO
    SET @tmpAlter = concat('alter table tmp_statusFlowCase add column status', i + 1, ' int(11)');
    PREPARE sqlStr FROM @tmpAlter;
    EXECUTE sqlStr;
    SET @tmpSql1 = concat(@tmpSql1, ', t', (i-1), '.next cur', i);
    SET @tmpSql2 = concat(@tmpSql2, ' LEFT JOIN tmp_statusFlow t', i, ' ON t', i - 1, '.next = t', i, '.cur');
    SET i = i + 1;
  END WHILE;

  /*add last status from tmp_statusFlow.next*/
  SET @tmpAlter = concat('alter table tmp_statusFlowCase add column status', (i + 1), ' int(11)');
  PREPARE sqlStr FROM @tmpAlter;
  EXECUTE sqlStr;
  SET @tmpSql1 = concat(@tmpSql1, ', t', (i - 1), '.next next', (i - 1));

  SET @tmpSql = concat('insert into tmp_statusFlowCase ', @tmpSql1, @tmpSql2, ' where t0.cur = 1');
  PREPARE sqlStr FROM @tmpSql;
  EXECUTE sqlStr;
  ALTER TABLE tmp_statusFlowCase
          ADD id INT NOT NULL AUTO_INCREMENT KEY FIRST;
END
$$

--
-- Definition for procedure t_createTalent
--
DROP PROCEDURE IF EXISTS t_createTalent$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createTalent(IN iNum INT)
  COMMENT '创建测试人才
in:
  iNum人才个数
out:
  none'
BEGIN
  DECLARE i                       INT;
  DECLARE vCurDate                DATE;
  DECLARE vHunterNum              INT;
  DECLARE vSexNum                 INT;
  DECLARE vAgeFromNum             INT;
  DECLARE vAgeToNum               INT;
  DECLARE vHeightFromNum          INT;
  DECLARE vHeightToNum            INT;
  DECLARE vEducationNum           INT;
  DECLARE vCommonLevelNum         INT;
  DECLARE vCityNum                INT;
  DECLARE vBusinessAreaNum        INT;
  DECLARE vIndustryNum            INT;

  DECLARE vCityAndBusinessAreaNum INT;

  DECLARE vHunter                 INT;
  DECLARE vPersonName             VARCHAR(255);
  DECLARE vAgeFrom                INT;
  DECLARE vAgeTo                  INT;
  DECLARE vAge                    INT;
  DECLARE vBirthYear              DATE;
  DECLARE vPhotoURL               TEXT;
  DECLARE vVideoURL               TEXT;
  DECLARE vSex                    BOOLEAN;
  DECLARE vMarriage               BOOLEAN;
  DECLARE vHeightFrom             INT;
  DECLARE vHeightTo               INT;
  DECLARE vHeight                 INT;
  DECLARE vEducation              INT;
  DECLARE vApprearance            INT;
  DECLARE vExpression             INT;
  DECLARE vHunterNote             TEXT;
  DECLARE vRelease                BOOLEAN;

  DECLARE vCity                   INT;
  DECLARE vBusinessArea           INT;
  DECLARE vIndustry               INT;

  DECLARE vTalent                 INT;

  TRUNCATE TABLE talent;
  TRUNCATE TABLE talentFitIndustry;
  TRUNCATE TABLE talentUnfitIndustry;
  TRUNCATE TABLE talentFitCity;
  TRUNCATE TABLE talentFitBusinessArea;

  SET vCurDate = now();

  SELECT
    max(id)
  FROM
    hunter
  INTO
    vHunterNum;

  SELECT
    max(id)
  FROM
    sex
  INTO
    vSexNum;

  SELECT
    max(id)
  FROM
    tmp_ageFrom
  INTO
    vAgeFromNum;

  SELECT
    max(id)
  FROM
    tmp_ageTo
  INTO
    vAgeToNum;

  SELECT
    max(id)
  FROM
    tmp_heightFrom
  INTO
    vHeightFromNum;

  SELECT
    max(id)
  FROM
    tmp_heightTo
  INTO
    vHeightToNum;

  SELECT
    max(id)
  FROM
    education
  INTO
    vEducationNum;

  SELECT
    max(id)
  FROM
    commonLevel
  INTO
    vCommonLevelNum;

  SELECT
    max(id)
  FROM
    city
  INTO
    vCityNum;

  SELECT
    max(id)
  FROM
    businessArea
  INTO
    vBusinessAreaNum;

  SELECT
    max(id)
  FROM
    industry
  INTO
    vIndustryNum;

  SET vCityAndBusinessAreaNum = vCityNum + vBusinessAreaNum;

  SET i = 1;

  WHILE i <= iNum
  DO
    SELECT
      id
    FROM
      hunter
    WHERE
      id =
      CASE
      WHEN mod(i, vHunterNum) = 0 THEN
        vHunterNum
      ELSE
        mod(i, vHunterNum)
      END
    INTO
      vHunter;

    SELECT
      concat('人名', i)
    INTO
      vPersonName;

    SELECT
      ageFrom
    FROM
      tmp_ageFrom
    WHERE
      id =
      CASE
      WHEN mod(i, vAgeFromNum) = 0 THEN
        vAgeFromNum
      ELSE
        mod(i, vAgeFromNum)
      END
    INTO
      vAgeFrom;

    SELECT
      ageTo
    FROM
      tmp_ageTo
    WHERE
      id =
      CASE
      WHEN mod(i, vAgeToNum) = 0 THEN
        vAgeToNum
      ELSE
        mod(i, vAgeToNum)
      END
    INTO
      vAgeTo;

    SELECT
      floor(((ifnull(vAgeFrom, 0) + ifnull(vAgeTo, 60))) / 2)
    INTO
      vAge;

    SELECT
      date(concat(year(vCurDate - INTERVAL vAge YEAR), '-01-01'))
    INTO
      vBirthYear;

    SELECT
      concat('photoURL', i)
    INTO
      vPhotoURL;

    SELECT
      concat('videoURL', i)
    INTO
      vVideoURL;

    SELECT
      id
    FROM
      sex
    WHERE
      id =
      CASE
      WHEN mod(i, vSexNum) = 0 THEN
        vSexNum
      ELSE
        mod(i, vSexNum)
      END
    INTO
      vSex;

    IF mod(i, 2) = 0
    THEN
      SET vMarriage = TRUE;
    ELSE
      SET vMarriage = FALSE;
    END IF;

    SELECT
      heightFrom
    FROM
      tmp_heightFrom
    WHERE
      id =
      CASE
      WHEN mod(i, vHeightFromNum) = 0 THEN
        vHeightFromNum
      ELSE
        mod(i, vHeightFromNum)
      END
    INTO
      vHeightFrom;

    SELECT
      heightTo
    FROM
      tmp_heightTo
    WHERE
      id =
      CASE
      WHEN mod(i, vHeightToNum) = 0 THEN
        vHeightToNum
      ELSE
        mod(i, vHeightToNum)
      END
    INTO
      vHeightTo;

    SELECT
      floor(((ifnull(vHeightFrom, 130) + ifnull(vHeightTo, 0))))
    INTO
      vHeight;

    SELECT
      id
    FROM
      education
    WHERE
      id =
      CASE
      WHEN mod(i, vEducationNum) = 0 THEN
        vEducationNum
      ELSE
        mod(i, vEducationNum)
      END
    INTO
      vEducation;

    SELECT
      id
    FROM
      commonLevel
    WHERE
      id =
      CASE
      WHEN mod(i, vCommonLevelNum) = 0 THEN
        vCommonLevelNum
      ELSE
        mod(i, vCommonLevelNum)
      END
    INTO
      vApprearance;

    SELECT
      id
    FROM
      commonLevel
    WHERE
      id =
      CASE
      WHEN mod(i, vCommonLevelNum) = 0 THEN
        vCommonLevelNum
      ELSE
        mod(i, vCommonLevelNum)
      END
    INTO
      vExpression;

    SELECT
      concat('猎头备注', i)
    INTO
      vHunterNote;

    IF mod(i, 2) = 0
    THEN
      SET vRelease = TRUE;
    ELSE
      SET vRelease = FALSE;
    END IF;

    INSERT INTO `talent` (`hunter`, `personName`, `birthYear`, `photoURL`, `videoURL`, `sex`, `marriage`, `height`, `education`, `appearance`, `expression`, `hunterNote`, `release`, `created`) VALUES (vHunter, vPersonName, vBirthYear, vPhotoURL, vVideoURL, vSex, vMarriage, vHeight, vEducation, vApprearance, vExpression, vHunterNote, vRelease, NULL);
    SET vTalent = LAST_INSERT_ID();

    SELECT
      id
    FROM
      city
    WHERE
      id =
      CASE
      WHEN mod(i, vCityNum) = 0 THEN
        vCityNum
      ELSE
        mod(i, vCityNum)
      END
    INTO
      vCity;

    SELECT
      id
    FROM
      businessArea
    WHERE
      id =
      CASE
      WHEN mod(i, vBusinessAreaNum) = 0 THEN
        vBusinessAreaNum
      ELSE
        mod(i, vBusinessAreaNum)
      END
    INTO
      vBusinessArea;

    SELECT
      id
    FROM
      industry
    WHERE
      id =
      CASE
      WHEN mod(i, vIndustryNum) = 0 THEN
        vIndustryNum
      ELSE
        mod(i, vIndustryNum)
      END
    INTO
      vIndustry;

    IF mod(i, vCityAndBusinessAreaNum) > 0 AND mod(i, vCityAndBusinessAreaNum) <= vCityNum
    THEN
      INSERT INTO `talentFitCity` (`talent`, `city`, `created`) VALUES (vTalent, vCity, NULL);
    ELSE
      INSERT INTO `talentFitBusinessArea` (`talent`, `businessArea`, `created`) VALUES (vTalent, vBusinessArea, NULL);
    END IF;

    IF mod(i, vIndustryNum * 3) > 0 AND mod(i, vIndustryNum * 3) <= vIndustryNum
    THEN
      INSERT INTO `talentFitIndustry` (`talent`, `industry`, `created`) VALUES (vTalent, vIndustry, NULL);
    ELSEIF mod(i, vIndustryNum * 3) > vIndustryNum AND mod(i, vIndustryNum * 3) <= (2 * vIndustryNum) THEN
      INSERT INTO `talentUnfitIndustry` (`talent`, `industry`, `created`) VALUES (vTalent, vIndustry, NULL);
    ELSE
      INSERT INTO `talentFitIndustry` (`talent`, `industry`, `created`) VALUES (vTalent, vIndustry, NULL);
      INSERT INTO `talentUnfitIndustry` (`talent`, `industry`, `created`) VALUES (vTalent, mod(vIndustry, vIndustryNum) + 1, NULL);

    END IF;

    SET i = i + 1;
  END WHILE;
END
$$

--
-- Definition for procedure t_createUserForEnterprise
--
DROP PROCEDURE IF EXISTS t_createUserForEnterprise$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createUserForEnterprise(IN iEnterprise INT,
                                        IN iNum        INT)
  COMMENT '为企业创建测试用户\\r
in:\\r
  iEnterprise 企业id\\r
  iNum 企业用户数\\r
out:\\r
  none'
BEGIN
  DECLARE eId   INT;
  DECLARE eName VARCHAR(255);
  DECLARE i     INT;

  SET i = 0;

  SELECT
    id
  , name
  INTO
    eId, eName
  FROM
    enterprise
  WHERE
    id = iEnterprise;

label1:
  LOOP
    SET i = i + 1;
    IF i > iNum
    THEN
      LEAVE label1;
    ELSE
      INSERT INTO `enterpriseUser` (`name`, `password`, `enterprise`, `created`) VALUES (concat(eName, i), '123456', eId, NULL);
    END IF;
  END LOOP label1;

END
$$

--
-- Definition for procedure t_createWelfare
--
DROP PROCEDURE IF EXISTS t_createWelfare$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createWelfare(IN iNum INT)
  COMMENT '创建测试福利
in:
  iNum
out:
  none'
BEGIN
  DECLARE i     INT;

  SET i = 0;

label1:
  LOOP
    SET i = i + 1;
    IF i > iNum
    THEN
      LEAVE label1;
    ELSE
INSERT INTO welfare (`name`, `created`) VALUES (concat('福利',i), NULL);
      END IF;
  END LOOP label1;
END
$$

--
-- Definition for procedure t_createWorkTime
--
DROP PROCEDURE IF EXISTS t_createWorkTime$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createWorkTime(IN iNum INT)
  COMMENT '创建测试工作时间类型
in:
  iNum
out:
  none'
BEGIN
  DECLARE i     INT;

  SET i = 0;

label1:
  LOOP
    SET i = i + 1;
    IF i > iNum
    THEN
      LEAVE label1;
    ELSE
INSERT INTO `workTime` (`name`, `created`) VALUES (concat('工作时间类型',i), NULL);
      END IF;
  END LOOP label1;
END
$$

--
-- Definition for procedure t_createWorkType
--
DROP PROCEDURE IF EXISTS t_createWorkType$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_createWorkType(IN iNum INT)
  COMMENT '创建测试奖金类型
in:
  iNum
out:
  none'
BEGIN
  DECLARE i     INT;

  SET i = 0;

label1:
  LOOP
    SET i = i + 1;
    IF i > iNum
    THEN
      LEAVE label1;
    ELSE
INSERT INTO `workType` (`name`, `created`) VALUES (concat('工作类型',i), NULL);
      END IF;
  END LOOP label1;
END
$$

--
-- Definition for procedure t_initDBData
--
DROP PROCEDURE IF EXISTS t_initDBData$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_initDBData()
BEGIN
  TRUNCATE sex;
  INSERT INTO sex (`name`, `created`) VALUES ('男', NULL);
  INSERT INTO sex (`name`, `created`) VALUES ('女', NULL);

  TRUNCATE dealStatus;
  INSERT INTO dealStatus (`name`, created) VALUES ('待定', NULL);
  INSERT INTO dealStatus (`name`, created) VALUES ('邀请面试', NULL);
  INSERT INTO dealStatus (`name`, created) VALUES ('接受面试', NULL);
  INSERT INTO dealStatus (`name`, created) VALUES ('拒绝面试', NULL);
  INSERT INTO dealStatus (`name`, created) VALUES ('面试拒绝', NULL);
  INSERT INTO dealStatus (`name`, created) VALUES ('发送offer', NULL);
  INSERT INTO dealStatus (`name`, created) VALUES ('接受offer', NULL);
  INSERT INTO dealStatus (`name`, created) VALUES ('拒绝offer', NULL);
  INSERT INTO dealStatus (`name`, created) VALUES ('已到岗', NULL);
  INSERT INTO dealStatus (`name`, created) VALUES ('未到岗', NULL);
  INSERT INTO dealStatus (`name`, created) VALUES ('拒绝', NULL);

  TRUNCATE commonLevel;
  INSERT INTO commonLevel (`name`, created) VALUES ('差', NULL);
  INSERT INTO commonLevel (`name`, created) VALUES ('较差', NULL);
  INSERT INTO commonLevel (`name`, created) VALUES ('一般', NULL);
  INSERT INTO commonLevel (`name`, created) VALUES ('良好', NULL);
  INSERT INTO commonLevel (`name`, created) VALUES ('优秀', NULL);

  TRUNCATE commissionDate;
  INSERT INTO commissionDate (`name`, period, created) VALUES ('1个月', 30, NULL);
  INSERT INTO commissionDate (`name`, period, created) VALUES ('3个月', 90, NULL);

  TRUNCATE bonus;
  CALL t_createBonus(3);

  TRUNCATE contractType;
  CALL t_createContractType(3);

  TRUNCATE education;
  CALL t_createEducation(3);

  TRUNCATE workType;
  CALL t_createWorkType(3);

  TRUNCATE enterprise;
  CALL t_createEnterprise(3);

  TRUNCATE enterpriseUser;
  CALL t_createEnterpriseUser(3);

  TRUNCATE hunter;
  CALL t_createHunter(3);

  TRUNCATE industry;
  CALL t_createIndustry(3);

  TRUNCATE city;
  CALL t_createCity(5);

  TRUNCATE businessArea;
  CALL t_createBusinessArea(2);

  TRUNCATE welfare;
  CALL t_createWelfare(3);

  TRUNCATE workTime;
  CALL t_createWorkTime(3);

  TRUNCATE language;
  CALL t_createLanguage(3);
END
$$

--
-- Definition for procedure t_initDBTmpData
--
DROP PROCEDURE IF EXISTS t_initDBTmpData$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_initDBTmpData()
BEGIN
  DROP TABLE IF EXISTS `tmp_statusFlow`;
  CREATE TABLE `tmp_statusFlow`
  (
    `id` INT(11) NOT NULL AUTO_INCREMENT,
    `cur` INT(11) NOT NULL COMMENT '当前状态',
    `next` INT(11) COMMENT '下个状态',
    PRIMARY KEY (`id`)
  ) ENGINE = INNODB DEFAULT CHARSET = utf8 COMMENT = '交易流程';

  INSERT INTO `tmp_statusFlow` (`cur`, `next`) VALUES (1, NULL), (1, 2), (1, 6), (2, NULL), (2, 3), (2, 4), (3, NULL), (3, 5), (3, 6), (3, 2), (4, NULL), (5, NULL), (6, NULL), (6, 7), (6, 8), (7, NULL), (7, 9), (7, 10), (7, 11), (8, NULL), (9, NULL), (10, NULL), (11, NULL);

  DROP TABLE IF EXISTS `tmp_statusRole`;
  CREATE TABLE `tmp_statusRole`
  (
    `id` INT(11) NOT NULL AUTO_INCREMENT,
    `status` INT(11) NOT NULL COMMENT '状态',
    `role` VARCHAR(255) NOT NULL COMMENT '角色名',
    PRIMARY KEY (`id`)
  ) ENGINE = INNODB DEFAULT CHARSET = utf8 COMMENT = '交易状态角色';

  INSERT INTO `tmp_statusRole` (`status`, `role`) VALUES (1, 'enterpriseUser'), (2, 'enterpriseUser'), (3, 'hunter'), (4, 'hunter'), (5, 'enterpriseUser'), (6, 'enterpriseUser'), (7, 'hunter'), (8, 'hunter'), (9, 'enterpriseUser'), (10, 'enterpriseUser'), (11, 'hunter');

  CALL t_createAgeFromTmpTable(13, 18, 1);
  CALL t_createAgeToTmpTable(10, 23, 1);
  CALL t_createHeightFromTmpTable(6, 130, 10);
  CALL t_createHeightToTmpTable(40, 20, 1);
  CALL t_createRequireNumberTmpTable(3);
  CALL t_createOnBoardDateTmpTable(60);
  CALL t_createSalaryFromTmpTable(10, 500, 500);
  CALL t_createSalaryToTmpTable(10, 500, 500);
  CALL t_createStatusFlowCaseTmpTable(10);
END
$$

--
-- Definition for procedure t_reset
--
DROP PROCEDURE IF EXISTS t_reset$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE t_reset()
  COMMENT '重置数据库测试数据'
BEGIN
  CALL t_initDBData;
  CALL t_initDBTmpData;
  CALL t_createjob(100);
  CALL t_createTalent(10000);
  CALL t_createDeal;
  CALL t_createStatusFlowCaseTmpTable(12);
  CALL t_createDealHistory;
END
$$

--
-- Definition for function createDeal
--
DROP FUNCTION IF EXISTS createDeal$$
CREATE DEFINER = 'root'@'localhost'
FUNCTION createDeal(iTalent INT, iJob INT, iEnterpriseUser INT, iStatus INT)
  RETURNS int(11)
  COMMENT '创建新交易
in:
  iTalent
  iJob
  iEnterpriseUser
out:
  boolean(创建成功与否)'
BEGIN
  DECLARE vResult TINYINT;

  SET sql_mode = 'STRICT_ALL_TABLES';
  INSERT INTO `deal` (`talent`, `job`, `updated`, `created`) VALUES (iTalent, iJob, NULL, NULL);
  IF ROW_COUNT() = 1
  THEN
    /*INSERT INTO dealHistory*/
    INSERT INTO `dealHistory` (`deal`, `status`, `role`, `roleId`, `updated`, `created`) VALUES (LAST_INSERT_ID(), iStatus, 'enterpriseUser', iEnterpriseUser, NULL, NULL);
    IF ROW_COUNT() = 1
    THEN
      SET vResult = 1;
    ELSE
      SET vResult = 0;
    END IF;
  ELSE
    SET vResult = 0;
  END IF;
  SET sql_mode = '';
  RETURN vResult;
END
$$

--
-- Definition for function createEnterprise
--
DROP FUNCTION IF EXISTS createEnterprise$$
CREATE DEFINER = 'root'@'localhost'
FUNCTION createEnterprise(iName VARCHAR(255), iPhone VARCHAR(255), iMail VARCHAR(255), iAddress VARCHAR(255), iIntroduction TEXT)
  RETURNS int(11)
  COMMENT '新建企业
in:
  iName
  iPhone
  iMail
  iAddress
  iIntroduction
out:
  boolean(创建成功与否)'
BEGIN
  DECLARE vResult TINYINT;

  SET sql_mode = 'STRICT_ALL_TABLES';
  INSERT INTO `enterprise` (`name`, `phone`, `mail`, `address`, `introduction`, `updated`, `created`) VALUES (iName, iPhone, iMail, iAddress, iIntroduction, NULL, NULL);
  IF ROW_COUNT() = 1
  THEN
    SET vResult = 1;
  ELSE
    SET vResult = 0;
  END IF;
  SET sql_mode = '';
  RETURN vResult;
END
$$

--
-- Definition for function createFitBusinessAreaF_talent
--
DROP FUNCTION IF EXISTS createFitBusinessAreaF_talent$$
CREATE DEFINER = 'root'@'localhost'
FUNCTION createFitBusinessAreaF_talent(iTalent INT, iBusinessArea INT)
  RETURNS int(11)
  COMMENT '为特定人才创建适合商区
in:
  iTalent
  iBusinessArea
out:
  boolean(创建成功与否)'
BEGIN
  DECLARE vResult TINYINT;

  SET sql_mode = 'STRICT_ALL_TABLES';
  INSERT INTO `talentFitBusinessArea` (`talent`, `businessArea`, `updated`, `created`) VALUES (iTalent, iBusinessArea, NULL, NULL);
  IF ROW_COUNT() = 1
  THEN
    SET vResult = 1;
  ELSE
    SET vResult = 0;
  END IF;
  SET sql_mode = '';
  RETURN vResult;
END
$$

--
-- Definition for function createFitCityF_talent
--
DROP FUNCTION IF EXISTS createFitCityF_talent$$
CREATE DEFINER = 'root'@'localhost'
FUNCTION createFitCityF_talent(iTalent INT, iCity INT)
  RETURNS int(11)
  COMMENT '为特定人才创建适合城市
in:
  iTalent
  iCity
out:
  boolean(创建成功与否)'
BEGIN
  DECLARE vResult TINYINT;

  SET sql_mode = 'STRICT_ALL_TABLES';
  INSERT INTO `talentFitCity` (`talent`, `city`, `updated`, `created`) VALUES (iTalent, iCity, NULL, NULL);
  IF ROW_COUNT() = 1
  THEN
    SET vResult = 1;
  ELSE
    SET vResult = 0;
  END IF;
  SET sql_mode = '';
  RETURN vResult;
END
$$

--
-- Definition for function createFitIndustryF_talent
--
DROP FUNCTION IF EXISTS createFitIndustryF_talent$$
CREATE DEFINER = 'root'@'localhost'
FUNCTION createFitIndustryF_talent(iTalent INT, iIndustry INT)
  RETURNS int(11)
  COMMENT '为特定人才创建适合行业
in:
  iTalent
  iIndustry
out:
  boolean(创建成功与否)'
BEGIN
  DECLARE vResult TINYINT;

  SET sql_mode = 'STRICT_ALL_TABLES';
  INSERT INTO `talentFitIndustry` (`talent`, `industry`, `updated`, `created`) VALUES (iTalent, iIndustry, NULL, NULL);
  IF ROW_COUNT() = 1
  THEN
    SET vResult = 1;
  ELSE
    SET vResult = 0;
  END IF;
  SET sql_mode = '';
  RETURN vResult;
END
$$

--
-- Definition for function createHunter
--
DROP FUNCTION IF EXISTS createHunter$$
CREATE DEFINER = 'root'@'localhost'
FUNCTION createHunter(iName       VARCHAR(255),
                             iPassword   VARCHAR(255),
                             iFixphone1  VARCHAR(255),
                             iFixphone2  VARCHAR(255),
                             iFixphone3  VARCHAR(255),
                             iMobile     VARCHAR(255),
                             iPersonName VARCHAR(255),
                             iIdNo       VARCHAR(255),
                             iAddress    VARCHAR(255),
                             iBankNo     VARCHAR(255),
                             iBankName   VARCHAR(255))
  RETURNS int(11)
  COMMENT '新建猎头
in:
  iName
  iPassword
  iFixphone1
  iFixphone2
  iFixphone3
  iMobile
  iPersonName
  iIdNo
  iAddress
  iBankNo
  iBankName
out:
  boolean(创建成功与否)'
BEGIN
  DECLARE vResult TINYINT;

  SET sql_mode = 'STRICT_ALL_TABLES';
  INSERT INTO `hunter` (`name`, `password`, `fixphone1`, `fixphone2`, `fixphone3`, `mobile`, `personName`, `idNo`, `address`, `bankNo`, `bankName`, `updated`, `created`) VALUES (iName, iPassword, iFixphone1, iFixphone2, iFixphone3, iMobile, iPersonName, iIdNo, iAddress, iBankNo, iBankName, NULL, NULL);
  IF ROW_COUNT() = 1
  THEN
    SET vResult = 1;
  ELSE
    SET vResult = 0;
  END IF;
  SET sql_mode = '';
  RETURN vResult;
END
$$

--
-- Definition for function createJob
--
DROP FUNCTION IF EXISTS createJob$$
CREATE DEFINER = 'root'@'localhost'
FUNCTION createJob(iCreator INT, iTitle VARCHAR(255), iRequireNumber INT, iWorkType INT, iContractType INT, iWorkTime INT, iCity INT, iBusinessArea INT, iOnBoardDate DATE, iSalaryFrom INT, iSalaryTo INT, iCommissionDate INT, iSex INT, iAgeFrom INT, iAgeTo INT, iHeightFrom INT, iHeightTo INT, iEducation INT, iSpecialSkill TEXT, iDetail TEXT)
  RETURNS tinyint(1)
  COMMENT '创建新职位
in:
  iCreator
  iTitle
  iRequireNumber
  iWorkType
  iContractType
  iWorkTime
  iCity
  iBusinessArea
  iOnBoardDate
  iSalaryFrom
  iSalaryTo
  iCommissionDate
  iSex
  iAgeFrom
  iAgeTo
  iHeightFrom
  iHeightTo
  iEducation
  iSpecialSkill
  iDetail
out:
  boolean(创建成功与否)'
BEGIN
  DECLARE vResult TINYINT;

  SET sql_mode = 'STRICT_ALL_TABLES';
  INSERT INTO `job` (`creator`, `title`, `requireNumber`, `workType`, `contractType`, `workTime`, `city`, `businessArea`, `onBoardDate`, `salaryFrom`, `salaryTo`, `commissionDate`, `sex`, `ageFrom`, `ageTo`, `heightFrom`, `heightTo`, `education`, `specialSkill`, `detail`, `updated`, `created`) VALUES (iCreator, iTitle, iRequireNumber, iWorkType, iContractType, iWorkTime, iCity, iBusinessArea, iOnBoardDate, iSalaryFrom, iSalaryTo, iCommissionDate, iSex, iAgeFrom, iAgeTo, iHeightFrom, iHeightTo, iEducation, iSpecialSkill, iDetail, NULL, NULL);
  IF ROW_COUNT() = 1
  THEN
    SET vResult = 1;
  ELSE
    SET vResult = 0;
  END IF;
  SET sql_mode = '';
  RETURN vResult;
END
$$

--
-- Definition for function createStatusF_deal
--
DROP FUNCTION IF EXISTS createStatusF_deal$$
CREATE DEFINER = 'root'@'localhost'
FUNCTION createStatusF_deal(iDeal INT, iStatus INT, iNote TEXT, iRole VARCHAR(255), iRoleId INT)
  RETURNS tinyint(4)
  COMMENT '为特定交易设置状态
in:
  iDeal
  iStatus
  iNote
  iRole
  iRoleId
out:
  boolean(设置成功与否)'
BEGIN
  DECLARE vResult TINYINT;

  SET sql_mode = 'STRICT_ALL_TABLES';
  INSERT INTO `dealHistory` (`deal`, `status`, `note`, `role`, `roleId`, `updated`, `created`) VALUES (iDeal, iStatus, iNote, iRole, iRoleID, NULL, NULL);
  IF ROW_COUNT() = 1
  THEN
    SET vResult = 1;
  ELSE
    SET vResult = 0;
  END IF;
  SET sql_mode = '';
  RETURN vResult;
END
$$

--
-- Definition for function createTalent
--
DROP FUNCTION IF EXISTS createTalent$$
CREATE DEFINER = 'root'@'localhost'
FUNCTION createTalent(iHunter INT, iPersonName VARCHAR(255), iBirthYear DATE, iPhotoURL TEXT, iVideoURL TEXT, iSex INT, iMarriage INT, iHeight INT, iEducation INT, iAppearance INT, iExpression INT, iHunterNote TEXT, iRelease INT)
  RETURNS tinyint(1)
  COMMENT '创建新人才
in:
  iHunter,
  iPersonName, 
  iBirthYear, 
  iPhotoURL, 
  iVideoURL, 
  iSex, 
  iMarriage, 
  iHeight, 
  iEducation, 
  iAppearance, 
  iExpression, 
  iHunterNote, 
  iRelease
out:
  boolean(创建成功与否)'
BEGIN
  DECLARE vResult TINYINT;

  SET sql_mode = 'STRICT_ALL_TABLES';
  INSERT INTO `talent` (`hunter`, `personName`, `birthYear`, `photoURL`, `videoURL`, `sex`, `marriage`, `height`, `education`, `appearance`, `expression`, `hunterNote`, `release`, `updated`, `created`) VALUES (iHunter, iPersonName, iBirthYear, iPhotoURL, iVideoURL, iSex, iMarriage, iHeight, iEducation, iAppearance, iExpression, iHunterNote, iRelease, NULL, NULL);
  IF ROW_COUNT() = 1
  THEN
    SET vResult = 1;
  ELSE
    SET vResult = 0;
  END IF;
  SET sql_mode = '';
  RETURN vResult;
END
$$

--
-- Definition for function createUnfitIndustryF_talent
--
DROP FUNCTION IF EXISTS createUnfitIndustryF_talent$$
CREATE DEFINER = 'root'@'localhost'
FUNCTION createUnfitIndustryF_talent(iTalent INT, iIndustry INT)
  RETURNS int(11)
  COMMENT '为特定人才创建不适合行业
in:
  iTalent
  iIndustry
out:
  boolean(创建成功与否)'
BEGIN
  DECLARE vResult TINYINT;

  SET sql_mode = 'STRICT_ALL_TABLES';
  INSERT INTO `talentUnfitIndustry` (`talent`, `industry`, `updated`, `created`) VALUES (iTalent, iIndustry, NULL, NULL);
  IF ROW_COUNT() = 1
  THEN
    SET vResult = 1;
  ELSE
    SET vResult = 0;
  END IF;
  SET sql_mode = '';
  RETURN vResult;
END
$$

--
-- Definition for function updateDealEnterpriseRemark
--
DROP FUNCTION IF EXISTS updateDealEnterpriseRemark$$
CREATE DEFINER = 'root'@'localhost'
FUNCTION updateDealEnterpriseRemark(iDeal INT, iAccurate INT, iCommunication INT, iQuality INT, iEnterpriseRemark TEXT)
  RETURNS int(11)
  COMMENT '企业用户为交易填写评语
in:
  iDeal
  iAccurate
  iCommunication
  iQuality
  iEnterpriseRemark
out:
  boolean(成功与否)'
BEGIN
  DECLARE vResult TINYINT;

  SET sql_mode = 'STRICT_ALL_TABLES';
  UPDATE `deal`
  SET
    `accurate` = iAccurate, `communication` = iCommunication, `quality` = iQuality, `enterpriseRemark` = iEnterpriseRemark, `updated` = NULL
  WHERE
    id = iDeal;

  IF ROW_COUNT() = 1
  THEN
    SET vResult = 1;
  ELSE
    SET vResult = 0;
  END IF;
  SET sql_mode = '';
  RETURN vResult;
END
$$

--
-- Definition for function updateEnterprise
--
DROP FUNCTION IF EXISTS updateEnterprise$$
CREATE DEFINER = 'root'@'localhost'
FUNCTION updateEnterprise(iEnterprise INT, iName VARCHAR(255), iPhone VARCHAR(255), iMail VARCHAR(255), iAddress VARCHAR(255), iIntroduction TEXT)
  RETURNS int(11)
  COMMENT '更新企业
in:
  iEnterprise
  iName
  iPhone
  iMail
  iAddress
  iIntroduction
out:
  boolean(创建成功与否)'
BEGIN
  DECLARE vResult TINYINT;

  SET sql_mode = 'STRICT_ALL_TABLES';
  UPDATE `enterprise`
  SET
    `name` = iName, `phone` = iPhone, `mail` = iMail, `address` = iAddress, `introduction` = iIntroduction, `updated` = NULL
  WHERE
    id = iEnterprise;

  IF ROW_COUNT() = 1
  THEN
    SET vResult = 1;
  ELSE
    SET vResult = 0;
  END IF;
  SET sql_mode = '';
  RETURN vResult;
END
$$

--
-- Definition for function updateHunter
--
DROP FUNCTION IF EXISTS updateHunter$$
CREATE DEFINER = 'root'@'localhost'
FUNCTION updateHunter(iHunter INT, iName VARCHAR(255), iFixphone1 VARCHAR(255), iFixphone2 VARCHAR(255), iFixphone3 VARCHAR(255), iMobile VARCHAR(255), iPersonName VARCHAR(255), iIdNo VARCHAR(255), iAddress VARCHAR(255), iBankNo VARCHAR(255), iBankName VARCHAR(255))
  RETURNS int(11)
  COMMENT '更新猎头
in:
  iHunter
  iName
  iPassword
  iFixphone1
  iFixphone2
  iFixphone3
  iMobile
  iPersonName
  iIdNo
  iAddress
  iBankNo
  iBankName
out:
  boolean(创建成功与否)'
BEGIN
  DECLARE vResult TINYINT;

  SET sql_mode = 'STRICT_ALL_TABLES';
  UPDATE `hunter`
  SET
    `name` = iName, `fixphone1` = iFixphone1, `fixphone2` = iFixphone2, `fixphone3` = iFixphone3, `mobile` = iMobile, `personName` = iPersonName, `idNo` = iIdNo, `address` = iAddress, `bankNo` = iBankNo, `bankName` = iBankName, `updated` = NULL
  WHERE
    id = iHunter;
  IF ROW_COUNT() = 1
  THEN
    SET vResult = 1;
  ELSE
    SET vResult = 0;
  END IF;
  SET sql_mode = '';
  RETURN vResult;
END
$$

--
-- Definition for function updateHunterPassword
--
DROP FUNCTION IF EXISTS updateHunterPassword$$
CREATE DEFINER = 'root'@'localhost'
FUNCTION updateHunterPassword(iHunter INT, iPassword VARBINARY(255))
  RETURNS int(11)
  COMMENT '更新猎头密码
in:
  iHunter
  iPassword
out:
  boolean(创建成功与否)'
BEGIN
  DECLARE vResult TINYINT;

  SET sql_mode = 'STRICT_ALL_TABLES';
  UPDATE `hunter`
  SET
    `password` = iPassword, `updated` = NULL
  WHERE
    id = iHunter;
  IF ROW_COUNT() = 1
  THEN
    SET vResult = 1;
  ELSE
    SET vResult = 0;
  END IF;
  SET sql_mode = '';
  RETURN vResult;
END
$$

--
-- Definition for function updateTalent
--
DROP FUNCTION IF EXISTS updateTalent$$
CREATE DEFINER = 'root'@'localhost'
FUNCTION updateTalent(iTalent INT, iPersonName VARCHAR(255), iBirthYear DATE, iPhotoURL TEXT, iVideoURL TEXT, iSex INT, iMarriage INT, iHeight INT, iEducation INT, iAppearance INT, iExpression INT, iHunterNote TEXT, iRelease INT)
  RETURNS int(11)
  COMMENT '更新特定人才信息
in:
  iTalent,
  iPersonName, 
  iBirthYear, 
  iPhotoURL, 
  iVideoURL, 
  iSex, 
  iMarriage, 
  iHeight, 
  iEducation, 
  iAppearance, 
  iExpression, 
  iHunterNote, 
  iRelease
out:
  boolean(创建成功与否)'
BEGIN
  DECLARE vResult TINYINT;

  SET sql_mode = 'STRICT_ALL_TABLES';
  UPDATE `talent`
  SET
    `personName` = iPersonName, `birthYear` = iBirthYear, `photoURL` = iPhotoURL, `videoURL` = iVideoURL, `sex` = iSex, `marriage` = iMarriage, `height` = iHeight, `education` = iEducation, `appearance` = iAppearance, `expression` = iExpression, `hunterNote` = iHunterNote, `release` = iRelease, `updated` = NULL
  WHERE
    id = iTalent;
  IF ROW_COUNT() = 1
  THEN
    SET vResult = 1;
  ELSE
    SET vResult = 0;
  END IF;
  SET sql_mode = '';
  RETURN vResult;
END
$$

DELIMITER ;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;